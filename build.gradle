/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */


plugins {
   id 'java'
   id 'application'
   //JFlex plugin
   id "org.xbib.gradle.plugin.jflex" version "1.5.0" 
   id "org.xbib.gradle.plugin.git" version "2.0.0"
}

jflex{
    verbose = 'true'
}

java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
     mavenCentral()

     ivy {
        url 'https://www.cs.odu.edu/~zeil/ivyrepo'
     }
 }


dependencies {
    //implementation 'edu.odu.cs.zeil:JarNeedsHeap:1.0'   TODO: Causes build errors when included in dependencies, may need another repository to fix.
    implementation 'edu.odu.cs.cs350:sourcedSuffixTrees:1.4'
    implementation 'com.googlecode.concurrent-trees:concurrent-trees:2.6.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

sourceSets {
  main {
     jflex {
       srcDir "src/main/jflex"
     }
  }
}

test {
    ignoreFailures = true 
    useJUnitPlatform()
}
ext.javaMainClass = "edu.odu.cs.cs350.DupDetector"
application {
    mainClassName = javaMainClass
}

javadoc {
    exclude 'edu/odu/cs/cs350/Scanner.java'
}

task reports (dependsOn: ['check', 'javadoc']) {
   description 'Generate all reports for this project'
}

task clonePages() { 
    doLast {
        mkdir 'build/gh-pages'
        def thisRepo = rootProject.projectDir.toString() + '/..'
        def pagesDir = "$buildDir/gh-pages"
        project.delete {
            delete pagesDir
        }
        def grgit = git.clone {
            dir = pagesDir
            uri = 'file:' + thisRepo
            bare = false
            refToCheckout = 'gh-pages'
        }
        grgit.checkout {
            branch = 'gh-pages'
        }
        grgit.close()
    }
}


task copyWebsite (dependsOn: ['reports', 'clonePages']) {
    doLast {
        ant.copy (todir: 'build/gh-pages') {
            fileset(dir: 'build/reports')
        }
        ant.copy (todir: 'build/gh-pages') {
            fileset(dir: 'build/docs')
        }
        ant.copy (todir: 'build/gh-pages') {
            fileset(dir: 'src/main/html')
        }
    }
}


task updateGHPages (dependsOn: ['copyWebsite']) {
    group = "Reporting"
    description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
    doLast {
        def pagesDir = "$buildDir/gh-pages"
        def grgit = git.open {
            dir = pagesDir
        }
        grgit.add (update: false, patterns: ['javadoc', 'tests', 'index.md'])
        grgit.add (update: true, patterns: ['javadoc', 'tests', 'index.md'])
        grgit.commit {
            message = "Updating web pages"
        }
        grgit.push {}
        grgit.close()
    }
}


task deployReports (dependsOn: 'updateGHPages') {
    doLast {
        exec {
            workingDir ='.'
            commandLine = ['git', 'push', 'origin', 'gh-pages']
        }
    }
}