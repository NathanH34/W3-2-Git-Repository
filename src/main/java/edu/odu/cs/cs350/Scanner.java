/* The following code was generated by JFlex 1.6.1 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2018  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**
*  C++ lexer definition.
*
* TODO: add recognition for #include statements
*
*/

package edu.odu.cs.cs350;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>cpp.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\114\1\115\1\1\16\7\4\0\1\3\1\77"+
    "\1\24\1\110\1\6\1\107\1\103\1\25\1\64\1\65\1\5\1\105"+
    "\1\73\1\23\1\21\1\4\1\10\1\16\1\15\1\57\1\111\1\17"+
    "\1\56\1\112\1\55\1\11\1\102\1\72\1\76\1\74\1\75\1\101"+
    "\1\0\3\14\1\113\1\22\1\20\5\6\1\12\13\6\1\13\2\6"+
    "\1\70\1\26\1\71\1\106\1\40\1\0\1\27\1\51\1\45\1\37"+
    "\1\41\1\36\1\32\1\54\1\31\1\6\1\53\1\30\1\43\1\33"+
    "\1\35\1\47\1\42\1\52\1\34\1\44\1\50\1\60\1\61\1\46"+
    "\1\62\1\63\1\66\1\104\1\67\1\100\6\7\1\116\32\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0"+
    "\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\1\0\5\7\2\0\246\6\1\0\46\6"+
    "\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6"+
    "\15\0\6\7\5\0\1\6\4\0\13\7\1\0\1\7\3\0\53\6"+
    "\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7"+
    "\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0"+
    "\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0"+
    "\12\7\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6"+
    "\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7\4\0\13\6"+
    "\65\0\25\6\1\0\10\6\26\0\60\7\66\6\3\7\1\6\22\7"+
    "\1\6\7\7\12\6\2\7\2\0\12\7\1\0\20\6\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0"+
    "\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6"+
    "\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6"+
    "\7\0\2\6\4\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7"+
    "\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6"+
    "\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6"+
    "\17\0\2\6\2\7\2\0\12\7\1\0\1\6\7\0\1\6\6\7"+
    "\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0"+
    "\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\6\0\4\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6\3\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\3\6\5\0"+
    "\2\6\2\7\2\0\12\7\20\0\1\6\3\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0"+
    "\2\6\2\7\2\0\12\7\1\0\2\6\15\0\4\7\1\0\10\6"+
    "\1\0\3\6\1\0\51\6\2\7\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\1\6\5\0\3\6\1\7\7\0\3\6\2\7\2\0\12\7"+
    "\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\6\0\12\7\2\0\2\7\15\0\60\6\1\7\2\6"+
    "\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6"+
    "\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6"+
    "\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6"+
    "\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6"+
    "\1\0\6\7\2\0\12\7\2\0\4\6\40\0\1\6\27\0\2\7"+
    "\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7"+
    "\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0"+
    "\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6"+
    "\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6"+
    "\14\7\1\6\17\7\2\0\46\6\1\0\1\6\5\0\1\6\2\0"+
    "\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0"+
    "\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0\126\6\2\0"+
    "\6\6\3\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0"+
    "\13\6\7\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0"+
    "\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6"+
    "\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\4\7"+
    "\1\0\12\7\6\0\130\6\10\0\5\6\2\7\42\6\1\7\1\6"+
    "\5\0\106\6\12\0\37\6\1\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\13\0\54\6\4\0\32\6\6\0\12\7\46\0"+
    "\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0"+
    "\12\7\15\0\1\6\10\0\16\7\102\0\5\7\57\6\21\7\7\6"+
    "\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\7"+
    "\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7"+
    "\44\6\2\0\11\6\107\0\3\7\1\0\25\7\4\6\1\7\4\6"+
    "\3\7\2\6\3\7\6\0\300\6\72\7\1\0\5\7\u0116\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\16\0\5\7\30\0\1\114\1\114"+
    "\5\7\20\0\2\6\23\0\1\6\13\0\5\7\1\0\12\7\1\0"+
    "\1\6\15\0\1\6\20\0\15\6\3\0\40\6\20\0\15\7\4\0"+
    "\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0"+
    "\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7"+
    "\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0"+
    "\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0"+
    "\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0"+
    "\132\6\1\0\4\6\5\0\52\6\2\0\136\6\21\0\33\6\65\0"+
    "\20\6\u0200\0\u19b6\6\112\0\u51eb\6\25\0\u048d\6\103\0\56\6\2\0"+
    "\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7"+
    "\1\0\37\6\2\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0"+
    "\44\6\1\0\10\6\77\0\13\6\1\7\3\6\1\7\4\6\1\7"+
    "\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\22\7"+
    "\12\0\12\7\6\0\22\7\6\6\3\0\1\6\1\0\1\6\2\0"+
    "\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7"+
    "\57\6\16\7\16\0\1\6\12\7\6\0\5\6\1\7\12\6\12\7"+
    "\5\6\1\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0"+
    "\12\7\6\0\27\6\3\0\1\6\3\7\62\6\1\7\1\6\3\7"+
    "\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0"+
    "\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0"+
    "\6\6\11\0\7\6\1\0\7\6\1\0\53\6\1\0\12\6\12\0"+
    "\163\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6"+
    "\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6"+
    "\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6"+
    "\2\0\66\6\50\0\15\6\3\0\20\7\20\0\20\7\3\0\2\6"+
    "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7"+
    "\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6"+
    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\6\1\0\32\6"+
    "\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6\42\0\173\6"+
    "\105\0\65\6\210\0\1\7\202\0\35\6\3\0\61\6\17\0\1\7"+
    "\37\0\40\6\15\0\36\6\5\0\46\6\5\7\5\0\36\6\2\0"+
    "\44\6\4\0\10\6\1\0\5\6\52\0\236\6\2\0\12\7\6\0"+
    "\44\6\4\0\44\6\4\0\50\6\10\0\64\6\234\0\u0137\6\11\0"+
    "\26\6\12\0\10\6\230\0\6\6\2\0\1\6\1\0\54\6\1\0"+
    "\2\6\3\0\1\6\2\0\27\6\12\0\27\6\11\0\37\6\101\0"+
    "\23\6\1\0\2\6\12\0\26\6\12\0\32\6\106\0\70\6\6\0"+
    "\2\6\100\0\1\6\3\7\1\0\2\7\5\0\4\7\4\6\1\0"+
    "\3\6\1\0\33\6\4\0\3\7\4\0\1\7\40\0\35\6\3\0"+
    "\35\6\43\0\10\6\1\0\34\6\2\7\31\0\66\6\12\0\26\6"+
    "\12\0\23\6\15\0\22\6\156\0\111\6\67\0\63\6\15\0\63\6"+
    "\u030d\0\3\7\65\6\17\7\37\0\12\7\17\0\4\7\55\6\13\7"+
    "\2\0\1\7\22\0\31\6\7\0\12\7\6\0\3\7\44\6\16\7"+
    "\1\0\12\7\20\0\43\6\1\7\2\0\1\6\11\0\3\7\60\6"+
    "\16\7\4\6\5\0\3\7\3\0\12\7\1\6\1\0\1\6\43\0"+
    "\22\6\1\0\31\6\14\7\6\0\1\7\101\0\7\6\1\0\1\6"+
    "\1\0\4\6\1\0\17\6\1\0\12\6\7\0\57\6\14\7\5\0"+
    "\12\7\6\0\4\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\2\0\1\6\6\0\1\7\5\0\5\6\2\7"+
    "\2\0\7\7\3\0\5\7\213\0\65\6\22\7\4\6\5\0\12\7"+
    "\46\0\60\6\24\7\2\6\1\0\1\6\10\0\12\7\246\0\57\6"+
    "\7\7\2\0\11\7\27\0\4\6\2\7\42\0\60\6\21\7\3\0"+
    "\1\6\13\0\12\7\46\0\53\6\15\7\10\0\12\7\66\0\32\6"+
    "\3\0\17\7\4\0\12\7\u0166\0\100\6\12\7\25\0\1\6\u0100\0"+
    "\1\6\12\7\50\6\7\7\1\6\4\7\10\0\1\7\10\0\1\6"+
    "\13\7\50\6\2\0\4\6\20\7\46\0\71\6\u0107\0\11\6\1\0"+
    "\45\6\10\7\1\0\10\7\1\6\17\0\12\7\30\0\36\6\2\0"+
    "\26\7\1\0\16\7\111\0\7\6\1\0\2\6\1\0\46\6\6\7"+
    "\3\0\1\7\1\0\2\7\1\0\7\7\1\6\1\7\10\0\12\7"+
    "\u02a6\0\u039a\6\146\0\157\6\21\0\304\6\u0abc\0\u042f\6\u0fd1\0\u0247\6"+
    "\u21b9\0\u0239\6\7\0\37\6\1\0\12\7\146\0\36\6\2\0\5\7"+
    "\13\0\60\6\7\7\11\0\4\6\14\0\12\7\11\0\25\6\5\0"+
    "\23\6\u0370\0\105\6\13\0\1\6\56\7\20\0\4\7\15\6\100\0"+
    "\2\6\36\0\u17ed\6\23\0\u02f3\6\u250d\0\u011f\6\121\0\u018c\6\u0904\0"+
    "\153\6\5\0\15\6\3\0\11\6\7\0\12\6\3\0\2\7\1\0"+
    "\4\7\u14c1\0\5\7\3\0\26\7\2\0\7\7\36\0\4\7\224\0"+
    "\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0"+
    "\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0"+
    "\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0"+
    "\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0"+
    "\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\10\6\2\0\62\7\u0200\0\67\7\4\0\62\7\10\0\1\7\16\0"+
    "\1\7\26\0\5\7\1\0\17\7\u0550\0\7\7\1\0\21\7\2\0"+
    "\7\7\1\0\2\7\1\0\5\7\u07d5\0\305\6\13\0\7\7\51\0"+
    "\104\6\7\7\5\0\12\7\u04a6\0\4\6\1\0\33\6\1\0\2\6"+
    "\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0\1\6"+
    "\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0\1\6"+
    "\1\0\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0\21\6"+
    "\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\2\0\u1682\6\16\0\u1d31\6"+
    "\u0c1f\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\24\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\1\1\37\2\40\1\41\2\1\2\42\1\1\1\2"+
    "\1\0\1\43\1\44\1\45\1\46\1\47\1\0\3\45"+
    "\1\50\1\46\1\0\1\51\1\0\1\52\1\53\7\5"+
    "\1\54\13\5\1\55\4\5\1\56\33\5\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\55"+
    "\1\70\1\71\1\72\1\73\6\0\1\74\2\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\12\74\1\0\1\107\2\110\2\45\1\46\2\0\1\5"+
    "\1\66\1\111\4\5\1\112\3\5\1\26\1\113\14\5"+
    "\1\114\15\5\1\115\12\5\1\35\23\5\1\116\1\117"+
    "\1\120\2\0\1\121\10\0\1\75\1\0\1\122\1\0"+
    "\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\133\1\110\2\45\1\0\3\5\1\134\1\135\1\5"+
    "\1\136\3\5\1\137\21\5\1\140\1\141\5\5\1\142"+
    "\1\143\3\5\1\144\11\5\1\145\11\5\1\146\10\5"+
    "\1\147\2\5\1\150\11\0\1\110\2\45\1\0\14\5"+
    "\1\151\3\5\1\67\1\152\1\153\13\5\1\154\4\5"+
    "\1\155\1\156\1\157\5\5\1\27\7\5\1\160\1\5"+
    "\1\161\1\5\1\33\1\162\10\5\1\163\1\121\5\0"+
    "\1\110\2\45\1\0\2\5\1\65\1\5\1\164\2\5"+
    "\1\64\1\5\1\165\1\166\1\167\1\170\1\171\2\5"+
    "\1\172\1\173\1\174\3\5\1\175\1\5\1\176\3\5"+
    "\1\177\15\5\1\72\1\200\3\5\1\32\4\5\1\201"+
    "\3\5\3\0\1\110\2\45\1\0\1\202\1\203\3\5"+
    "\1\204\3\5\1\205\3\5\1\206\3\5\1\207\5\5"+
    "\1\210\4\5\1\211\1\5\1\212\6\5\1\213\1\5"+
    "\1\214\1\110\2\45\1\0\3\5\1\215\3\5\1\216"+
    "\1\217\1\5\1\220\1\221\1\5\1\222\4\5\1\223"+
    "\1\224\1\5\1\225\1\226\1\227\1\5\1\230\1\5"+
    "\1\231\1\232\1\233\1\234\1\110\2\45\1\0\3\5"+
    "\1\235\5\5\1\236\1\5\1\237\1\240\1\241\1\242"+
    "\1\5\1\110\2\45\1\0\10\5\1\243\1\5\1\0"+
    "\2\45\1\244\4\5\1\245\4\5\1\0\2\45\4\5"+
    "\1\246\1\247\1\250\1\5\1\0\2\45\1\5\1\251"+
    "\1\252\1\253\1\5\1\0\2\45\2\5\1\0\2\45"+
    "\1\254\1\5\1\0\2\45\1\255\1\0\1\45\1\46"+
    "\1\0\5\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\355\0\u018b\0\u01da"+
    "\0\u0229\0\u0278\0\u02c7\0\u0316\0\u0365\0\355\0\355\0\u03b4"+
    "\0\u0403\0\u0452\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c"+
    "\0\u067b\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4"+
    "\0\u08f3\0\u0942\0\u0991\0\355\0\355\0\355\0\355\0\355"+
    "\0\355\0\355\0\355\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\355"+
    "\0\355\0\355\0\u0b1c\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\u0ca7"+
    "\0\u0cf6\0\u0d45\0\355\0\355\0\u0d94\0\u0de3\0\u0e32\0\355"+
    "\0\u0e81\0\u0ed0\0\u0f1f\0\355\0\355\0\u0f6e\0\u0fbd\0\355"+
    "\0\u100c\0\u105b\0\u10aa\0\u10f9\0\355\0\u1148\0\u1197\0\355"+
    "\0\u11e6\0\355\0\355\0\u1235\0\u1284\0\u12d3\0\u1322\0\u1371"+
    "\0\u13c0\0\u140f\0\u0229\0\u145e\0\u14ad\0\u14fc\0\u154b\0\u159a"+
    "\0\u15e9\0\u1638\0\u1687\0\u16d6\0\u1725\0\u1774\0\u17c3\0\u1812"+
    "\0\u1861\0\u18b0\0\u18ff\0\u194e\0\u199d\0\u19ec\0\u1a3b\0\u1a8a"+
    "\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6\0\u1c15\0\u1c64\0\u1cb3\0\u1d02"+
    "\0\u1d51\0\u1da0\0\u1def\0\u1e3e\0\u1e8d\0\u1edc\0\u1f2b\0\u1f7a"+
    "\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u2105\0\u2154\0\u21a3\0\355"+
    "\0\355\0\u21f2\0\355\0\u2241\0\355\0\355\0\355\0\355"+
    "\0\355\0\355\0\355\0\355\0\355\0\u2290\0\u22df\0\u232e"+
    "\0\u237d\0\u23cc\0\u241b\0\355\0\u246a\0\u24b9\0\355\0\355"+
    "\0\355\0\355\0\355\0\355\0\355\0\355\0\355\0\u2508"+
    "\0\u2557\0\u25a6\0\u25f5\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780"+
    "\0\u27cf\0\u281e\0\355\0\u286d\0\u28bc\0\u290b\0\u295a\0\u29a9"+
    "\0\u29f8\0\u2a47\0\u2a96\0\u2ae5\0\u0229\0\u2b34\0\u2b83\0\u2bd2"+
    "\0\u2c21\0\u0229\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d\0\u0229\0\u2dac"+
    "\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024"+
    "\0\u3073\0\u30c2\0\u3111\0\u0229\0\u3160\0\u31af\0\u31fe\0\u324d"+
    "\0\u329c\0\u32eb\0\u333a\0\u3389\0\u33d8\0\u3427\0\u3476\0\u34c5"+
    "\0\u3514\0\u0229\0\u3563\0\u35b2\0\u3601\0\u3650\0\u369f\0\u36ee"+
    "\0\u373d\0\u378c\0\u37db\0\u382a\0\u3879\0\u38c8\0\u3917\0\u3966"+
    "\0\u39b5\0\u3a04\0\u3a53\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f\0\u3bde"+
    "\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8\0\u3e07\0\u3e56"+
    "\0\355\0\u3ea5\0\355\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1\0\u4030"+
    "\0\u407f\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u420a\0\355\0\u2557"+
    "\0\355\0\u4259\0\355\0\355\0\355\0\355\0\355\0\355"+
    "\0\355\0\355\0\355\0\u42a8\0\u42f7\0\u4346\0\u4395\0\u43e4"+
    "\0\u4433\0\u4482\0\u0229\0\u0229\0\u44d1\0\u0229\0\u4520\0\u456f"+
    "\0\u45be\0\u460d\0\u465c\0\u46ab\0\u46fa\0\u4749\0\u4798\0\u47e7"+
    "\0\u4836\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1\0\u4a10\0\u4a5f"+
    "\0\u4aae\0\u4afd\0\u4b4c\0\u0229\0\u0229\0\u4b9b\0\u4bea\0\u4c39"+
    "\0\u4c88\0\u4cd7\0\u0229\0\u0229\0\u4d26\0\u4d75\0\u4dc4\0\u0229"+
    "\0\u4e13\0\u4e62\0\u4eb1\0\u4f00\0\u4f4f\0\u4f9e\0\u4fed\0\u503c"+
    "\0\u508b\0\u50da\0\u5129\0\u5178\0\u51c7\0\u5216\0\u5265\0\u52b4"+
    "\0\u5303\0\u5352\0\u53a1\0\u0229\0\u53f0\0\u543f\0\u548e\0\u54dd"+
    "\0\u552c\0\u557b\0\u55ca\0\u5619\0\u0229\0\u5668\0\u56b7\0\355"+
    "\0\u5706\0\u5755\0\u57a4\0\u57f3\0\u5842\0\u5891\0\u58e0\0\u592f"+
    "\0\u597e\0\u59cd\0\u5a1c\0\u5a6b\0\u5aba\0\u5b09\0\u5b58\0\u5ba7"+
    "\0\u5bf6\0\u5c45\0\u5c94\0\u5ce3\0\u5d32\0\u5d81\0\u5dd0\0\u5e1f"+
    "\0\u5e6e\0\u0229\0\u5ebd\0\u5f0c\0\u5f5b\0\u0229\0\u0229\0\u0229"+
    "\0\u5faa\0\u5ff9\0\u6048\0\u6097\0\u60e6\0\u6135\0\u6184\0\u61d3"+
    "\0\u6222\0\u6271\0\u62c0\0\u0229\0\u630f\0\u635e\0\u63ad\0\u63fc"+
    "\0\u0229\0\u0229\0\u644b\0\u649a\0\u64e9\0\u6538\0\u6587\0\u65d6"+
    "\0\u0229\0\u6625\0\u6674\0\u66c3\0\u6712\0\u6761\0\u67b0\0\u67ff"+
    "\0\u0229\0\u684e\0\u0229\0\u689d\0\u0229\0\u0229\0\u68ec\0\u693b"+
    "\0\u698a\0\u69d9\0\u6a28\0\u6a77\0\u6ac6\0\u6b15\0\u0229\0\355"+
    "\0\u6b64\0\u6bb3\0\u6c02\0\u6c51\0\u6ca0\0\u6cef\0\u6d3e\0\u6d8d"+
    "\0\u6ddc\0\u6e2b\0\u6e7a\0\u0229\0\u6ec9\0\u0229\0\u6f18\0\u6f67"+
    "\0\u0229\0\u6fb6\0\u0229\0\u0229\0\u7005\0\u0229\0\u0229\0\u7054"+
    "\0\u70a3\0\u0229\0\u0229\0\u0229\0\u70f2\0\u7141\0\u7190\0\u0229"+
    "\0\u71df\0\u0229\0\u722e\0\u727d\0\u72cc\0\u0229\0\u731b\0\u736a"+
    "\0\u73b9\0\u7408\0\u7457\0\u74a6\0\u74f5\0\u7544\0\u7593\0\u75e2"+
    "\0\u7631\0\u7680\0\u76cf\0\u0229\0\u0229\0\u771e\0\u776d\0\u77bc"+
    "\0\u0229\0\u780b\0\u785a\0\u78a9\0\u78f8\0\u0229\0\u7947\0\u7996"+
    "\0\u79e5\0\u7a34\0\u7a83\0\u7ad2\0\u7b21\0\u7b70\0\u7bbf\0\u7c0e"+
    "\0\u0229\0\u0229\0\u7c5d\0\u7cac\0\u7cfb\0\u0229\0\u7d4a\0\u7d99"+
    "\0\u7de8\0\u0229\0\u7e37\0\u7e86\0\u7ed5\0\u0229\0\u7f24\0\u7f73"+
    "\0\u7fc2\0\u0229\0\u8011\0\u8060\0\u80af\0\u80fe\0\u814d\0\u0229"+
    "\0\u819c\0\u81eb\0\u823a\0\u8289\0\u0229\0\u82d8\0\u0229\0\u8327"+
    "\0\u8376\0\u83c5\0\u8414\0\u8463\0\u84b2\0\u0229\0\u8501\0\u0229"+
    "\0\u8550\0\u859f\0\u85ee\0\u863d\0\u868c\0\u86db\0\u872a\0\u0229"+
    "\0\u8779\0\u87c8\0\u8817\0\u0229\0\u0229\0\u8866\0\u0229\0\u0229"+
    "\0\u88b5\0\u0229\0\u8904\0\u8953\0\u89a2\0\u89f1\0\u0229\0\u0229"+
    "\0\u8a40\0\u0229\0\u0229\0\u0229\0\u8a8f\0\u0229\0\u8ade\0\u0229"+
    "\0\u0229\0\u0229\0\u0229\0\u8b2d\0\u8b7c\0\u8bcb\0\u8c1a\0\u8c69"+
    "\0\u8cb8\0\u8d07\0\u0229\0\u8d56\0\u8da5\0\u8df4\0\u8e43\0\u8e92"+
    "\0\u0229\0\u8ee1\0\u0229\0\u0229\0\u0229\0\u0229\0\u8f30\0\u8f7f"+
    "\0\u8fce\0\u901d\0\u906c\0\u90bb\0\u910a\0\u9159\0\u91a8\0\u91f7"+
    "\0\u9246\0\u9295\0\u92e4\0\u0229\0\u9333\0\u9382\0\u93d1\0\u9420"+
    "\0\355\0\u946f\0\u94be\0\u950d\0\u955c\0\u0229\0\u95ab\0\u95fa"+
    "\0\u9649\0\u9698\0\u96e7\0\u9736\0\u9785\0\u97d4\0\u9823\0\u9872"+
    "\0\u98c1\0\u0229\0\u0229\0\u0229\0\u9910\0\u995f\0\u99ae\0\u99fd"+
    "\0\u9a4c\0\u0229\0\u0229\0\u0229\0\u9a9b\0\u9aea\0\u9b39\0\u9b88"+
    "\0\u9bd7\0\u9c26\0\u9c75\0\u9cc4\0\u9d13\0\u0229\0\u9d62\0\u9db1"+
    "\0\u9e00\0\u9e4f\0\u0229\0\u9e9e\0\u9eed\0\u9eed\0\u9f3c\0\u9f8b"+
    "\0\u9fda\0\ua029\0\ua078\0\ua0c7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\11\1\31\1\11\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\11\3\13"+
    "\1\42\1\43\2\11\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\2\13\1\11\1\4\1\6\1\4\1\71\1\72\1\73"+
    "\21\71\1\74\1\71\1\75\70\71\1\76\1\77\1\100"+
    "\22\76\1\4\1\101\70\76\121\0\1\6\120\0\1\102"+
    "\1\103\66\0\1\104\116\0\1\105\30\0\13\11\1\0"+
    "\1\11\4\0\35\11\25\0\3\11\2\0\1\11\10\0"+
    "\1\106\1\107\1\110\1\111\1\0\1\112\1\113\1\114"+
    "\1\115\1\116\1\117\5\0\1\110\5\0\1\115\1\120"+
    "\1\0\1\117\4\0\1\111\6\0\1\107\1\114\1\112"+
    "\31\0\2\114\1\120\13\0\2\13\1\110\2\0\3\13"+
    "\1\115\1\116\1\117\5\0\1\110\5\0\1\115\1\120"+
    "\1\0\1\117\13\0\3\13\31\0\2\13\1\120\13\0"+
    "\2\116\3\0\3\116\35\0\3\116\31\0\2\116\21\0"+
    "\1\121\5\0\1\122\50\0\1\123\30\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\124\2\11\1\125\1\126\7\11"+
    "\1\127\3\11\1\130\13\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\131\26\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\132\2\11\1\133\25\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\134\26\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\135\5\11\1\136\3\11\1\137"+
    "\6\11\1\140\13\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\141\12\11\1\142"+
    "\7\11\1\143\4\11\1\144\1\145\1\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\20\11"+
    "\1\146\2\11\1\147\11\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\150\1\151\4\11"+
    "\1\152\14\11\1\153\11\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\154\3\11"+
    "\1\155\20\11\1\156\1\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\157\2\11"+
    "\1\160\12\11\1\161\15\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\21\11\1\162\13\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\163\10\11\1\164\1\11\1\165\5\11"+
    "\1\166\1\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\167\1\170\4\11\1\171\16\11"+
    "\1\172\7\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\173\26\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\21\11"+
    "\1\174\1\11\1\175\11\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\176\1\177"+
    "\27\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\200\3\11\1\201\14\11\1\202"+
    "\11\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\203\22\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\204"+
    "\3\11\1\205\26\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\206\6\11\1\207"+
    "\7\11\25\0\3\11\2\0\1\11\74\0\1\210\116\0"+
    "\1\211\1\212\115\0\1\213\1\0\1\214\114\0\1\215"+
    "\116\0\1\216\6\0\1\217\107\0\1\220\7\0\1\221"+
    "\106\0\1\222\10\0\1\223\105\0\1\224\116\0\1\225"+
    "\52\0\1\226\1\227\5\0\1\230\1\0\1\231\5\0"+
    "\1\232\1\233\46\0\1\71\2\0\21\71\1\0\1\71"+
    "\1\0\70\71\2\0\1\73\114\0\1\234\2\0\5\234"+
    "\1\235\4\234\2\235\1\236\4\234\1\237\1\240\1\241"+
    "\4\234\1\242\2\234\1\243\5\234\1\244\4\234\1\245"+
    "\1\246\3\234\1\236\1\235\31\234\2\236\1\234\30\0"+
    "\1\247\73\0\1\100\114\0\1\234\2\0\5\234\1\250"+
    "\4\234\2\250\1\251\4\234\1\252\1\253\1\254\4\234"+
    "\1\255\2\234\1\256\5\234\1\257\4\234\1\260\1\261"+
    "\3\234\1\251\1\250\31\234\2\251\1\234\3\0\1\102"+
    "\1\5\1\6\114\102\5\103\1\262\111\103\10\0\1\106"+
    "\1\107\1\263\2\0\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\5\0\1\263\5\0\1\115\1\120\1\0\1\117"+
    "\13\0\1\107\1\114\1\112\31\0\2\114\1\120\13\0"+
    "\2\107\3\0\3\107\1\115\1\116\1\117\13\0\1\115"+
    "\1\120\1\0\1\117\13\0\3\107\31\0\2\107\1\120"+
    "\13\0\1\264\1\265\2\0\5\265\1\0\1\265\4\0"+
    "\1\265\6\0\2\265\1\0\1\265\3\0\1\265\3\0"+
    "\1\265\3\0\3\265\31\0\3\265\13\0\1\266\1\107"+
    "\1\263\2\0\3\266\1\115\1\116\1\117\5\0\1\263"+
    "\5\0\1\115\1\120\1\0\1\117\13\0\1\107\2\266"+
    "\31\0\2\266\1\120\13\0\1\114\1\107\1\263\2\0"+
    "\3\114\1\115\1\116\1\117\5\0\1\263\5\0\1\115"+
    "\1\120\1\0\1\117\13\0\1\107\2\114\31\0\2\114"+
    "\1\120\13\0\1\267\1\107\1\263\2\0\3\267\1\115"+
    "\1\116\1\117\5\0\1\263\5\0\1\115\1\120\1\0"+
    "\1\117\13\0\1\107\2\267\31\0\2\267\1\120\13\0"+
    "\2\116\3\0\3\116\1\115\1\0\1\117\13\0\1\115"+
    "\1\120\1\0\1\117\13\0\3\116\31\0\2\116\1\120"+
    "\13\0\2\270\3\0\3\270\3\0\1\271\31\0\3\270"+
    "\25\0\1\271\3\0\2\270\22\0\1\272\106\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\273\32\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\274\24\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\14\11\1\275\20\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\276\26\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\277\17\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"+
    "\1\300\30\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\301\13\11\1\302\17\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\303\17\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\14\11\1\304\20\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\305\2\11\1\306\17\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\32\11"+
    "\1\307\2\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\310\33\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\311\30\11\1\312\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\313\22\11\1\314\11\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\315\26\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\316\32\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\317\30\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\320\22\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\321\23\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\322\33\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\323\26\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\23\11\1\324\11\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\325\32\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\21\11\1\326\13\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\327\5\11\1\330\6\11\1\331\16\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\332\30\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\333\27\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\21\11\1\334\13\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\335\2\11"+
    "\1\336\14\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\337\17\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\14\11"+
    "\1\340\20\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\21\11\1\341\11\11\1\342\1\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\343\20\11\1\344\11\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\20\11"+
    "\1\345\14\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\5\11\1\346\7\11\1\347\17\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\350\34\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\351\4\11\1\352"+
    "\2\11\1\353\20\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\354\34\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\23\11"+
    "\1\355\11\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\22\11\1\356\12\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\357\3\11\1\360\26\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\361\2\11"+
    "\1\362\27\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\363\32\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\364\17\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\365\26\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\366\22\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\367\1\370\3\11\1\371"+
    "\3\11\1\372\1\11\1\373\17\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\23\11\1\374"+
    "\11\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\375\1\376\32\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\25\11"+
    "\1\377\7\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\u0100\32\11\25\0\3\11"+
    "\2\0\1\11\74\0\1\u0101\1\u0102\115\0\1\u0103\53\0"+
    "\1\u0104\120\0\1\u0105\2\0\1\u0106\4\0\1\u0107\114\0"+
    "\1\u0108\105\0\1\u0109\2\0\1\u010a\16\0\1\u010b\116\0"+
    "\1\u010c\77\0\1\u010d\1\u010e\72\0\1\236\4\0\3\236"+
    "\36\0\2\236\31\0\2\236\14\0\1\u010f\4\0\3\u010f"+
    "\36\0\2\u010f\31\0\2\u010f\14\0\1\u0110\4\0\3\u0110"+
    "\5\0\1\u0111\30\0\2\u0110\31\0\2\u0110\14\0\1\u0112"+
    "\4\0\3\u0112\5\0\1\u0111\30\0\2\u0112\31\0\2\u0112"+
    "\31\0\1\u0113\116\0\1\u0114\116\0\1\u0115\116\0\1\u0116"+
    "\116\0\1\u0117\116\0\1\u0118\116\0\1\u0119\116\0\1\u011a"+
    "\71\0\4\103\1\6\1\262\111\103\10\0\1\264\1\265"+
    "\1\u011b\1\0\5\265\1\0\1\265\4\0\1\265\1\u011b"+
    "\5\0\2\265\1\0\1\265\3\0\1\265\3\0\1\265"+
    "\3\0\3\265\31\0\3\265\13\0\2\u011c\1\u011b\1\0"+
    "\5\u011c\1\0\1\u011c\4\0\1\u011c\1\u011b\5\0\2\u011c"+
    "\1\0\1\u011c\3\0\1\u011c\3\0\1\u011c\3\0\3\u011c"+
    "\31\0\3\u011c\13\0\1\u011d\1\107\1\263\2\0\3\u011d"+
    "\1\115\1\116\1\117\5\0\1\263\5\0\1\115\1\120"+
    "\1\0\1\117\13\0\1\107\2\u011d\31\0\2\u011d\1\120"+
    "\13\0\1\u011e\1\107\1\263\2\0\3\u011e\1\115\1\116"+
    "\1\117\5\0\1\263\5\0\1\115\1\120\1\0\1\117"+
    "\13\0\1\107\2\u011e\31\0\2\u011e\1\120\13\0\2\270"+
    "\3\0\3\270\1\115\15\0\1\115\1\120\15\0\3\270"+
    "\31\0\2\270\1\120\13\0\2\270\3\0\3\270\35\0"+
    "\3\270\31\0\2\270\115\0\1\u011f\13\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u0120\31\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u0121"+
    "\23\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\14\11\1\u0122\20\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\u0123"+
    "\26\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u0124\31\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u0125"+
    "\32\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\u0126\26\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u0127"+
    "\22\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\17\11\1\u0128\15\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u0129"+
    "\23\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\u012a\33\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\u012b"+
    "\30\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u012c\22\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\u012d"+
    "\17\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\21\11\1\u012e\13\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\23\11\1\u012f"+
    "\11\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0130\17\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u0131"+
    "\16\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\23\11\1\u0132\11\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u0133"+
    "\22\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u0134\27\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\u0135\34\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u0136\22\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\22\11\1\u0137\12\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u0138\22\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u0139\34\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\u013a\33\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u013b\34\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u013c\22\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\14\11\1\u013d\20\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u013e\22\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\u013f\4\11\1\u0140\26\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u0141\34\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\20\11\1\u0142\14\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u0143\22\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u0144\27\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\u0145\3\11\1\u0146\22\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u0147"+
    "\22\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u0148\22\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u0149"+
    "\16\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u014a\27\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\u014b"+
    "\7\11\1\u014c\1\u014d\16\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u014e\22\11\1\u014f"+
    "\7\11\1\u0150\1\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\20\11\1\u0151\14\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\23\11\1\u0152\11\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u0153\23\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\u0154\33\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\31\11\1\u0155\3\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u0156\17\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u0157\26\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u0158\32\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u0159\30\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\u015a\5\11\1\u015b\26\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\u015c\33\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u015d\34\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u015e\30\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u015f\32\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\u0160\33\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\21\11\1\u0161\13\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\21\11\1\u0162\13\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u0163\17\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u0164\34\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0165\24\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\u0166\34\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\u0167"+
    "\33\11\25\0\3\11\2\0\1\11\74\0\1\u0168\55\0"+
    "\1\u0169\130\0\1\u016a\104\0\1\u010d\3\0\1\u016b\126\0"+
    "\1\u016c\105\0\1\226\111\0\1\u016d\2\0\1\u0169\121\0"+
    "\1\u016e\131\0\1\u016f\73\0\1\u0170\126\0\1\u016b\110\0"+
    "\1\u0171\112\0\1\u0111\101\0\2\u0172\1\u011b\1\0\5\u0172"+
    "\1\0\1\u0172\4\0\1\u0172\1\u011b\5\0\2\u0172\1\0"+
    "\1\u0172\3\0\1\u0172\3\0\1\u0172\3\0\3\u0172\31\0"+
    "\3\u0172\13\0\1\u0173\1\107\1\263\2\0\3\u0173\1\115"+
    "\1\116\1\117\5\0\1\263\5\0\1\115\1\120\1\0"+
    "\1\117\13\0\1\107\2\u0173\31\0\2\u0173\1\120\13\0"+
    "\1\u0174\1\107\1\263\2\0\3\u0174\1\115\1\116\1\117"+
    "\5\0\1\263\5\0\1\115\1\120\1\0\1\117\13\0"+
    "\1\107\2\u0174\31\0\2\u0174\1\120\115\0\1\u0175\12\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u0176\30\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u0177\22\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u0178\32\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\u0179\30\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u017a\27\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\u017b\16\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\u017c\22\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\20\11\1\u017d\14\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\u017e\22\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\u017f\26\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u0180\32\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\u0181\16\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u0182\17\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\u0183\16\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\25\11\1\u0184\7\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\u0185\34\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\13\11\1\u0186\21\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u0187\22\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\u0188\17\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"+
    "\1\u0189\30\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\u018a\33\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\u018b\17\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\21\11\1\u018c\13\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\u018d\17\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\14\11\1\u018e\20\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\23\11"+
    "\1\u018f\11\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\u0190\32\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\23\11"+
    "\1\u0191\11\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\22\11\1\u0192\12\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\u0193\33\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\32\11\1\u0194\2\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\u0195"+
    "\34\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\u0196\1\11\1\u0197\3\11\1\u0198"+
    "\24\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\25\11\1\u0199\7\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\u019a"+
    "\27\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u019b\17\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u019c"+
    "\32\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u019d\22\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\32\11\1\u019e"+
    "\2\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u019f\22\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u01a0"+
    "\32\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\u01a1\33\11\25\0\3\11\2\0"+
    "\1\11\6\0\10\11\1\u01a2\2\11\1\0\1\11\4\0"+
    "\26\11\1\u01a3\1\11\1\u01a4\4\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u01a5"+
    "\22\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\u01a6\32\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\u01a7\34\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u01a8\22\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\u01a9\30\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u01aa\31\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u01ab\31\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\u01ac\30\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\23\11\1\u01ad\11\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\24\11\1\u01ae\10\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u01af\17\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u01b0\27\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u01b1\22\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u01b2\32\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\23\11\1\u01b3\11\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\21\11\1\u01b4\13\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u01b5\17\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\23\11\1\u01b6\11\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u01b7\22\11"+
    "\25\0\3\11\2\0\1\11\41\0\1\u01b8\105\0\1\u01b9"+
    "\127\0\1\u016d\112\0\1\u01ba\117\0\1\u01b8\111\0\1\u016d"+
    "\122\0\1\u01bb\113\0\1\u01bc\117\0\1\u01bd\73\0\2\u01be"+
    "\1\u011b\1\0\5\u01be\1\0\1\u01be\4\0\1\u01be\1\u011b"+
    "\5\0\2\u01be\1\0\1\u01be\3\0\1\u01be\3\0\1\u01be"+
    "\3\0\3\u01be\31\0\3\u01be\13\0\1\u01bf\1\107\1\263"+
    "\2\0\3\u01bf\1\115\1\116\1\117\5\0\1\263\5\0"+
    "\1\115\1\120\1\0\1\117\13\0\1\107\2\u01bf\31\0"+
    "\2\u01bf\1\120\13\0\1\u01c0\1\107\1\263\2\0\3\u01c0"+
    "\1\115\1\116\1\117\5\0\1\263\5\0\1\115\1\120"+
    "\1\0\1\117\13\0\1\107\2\u01c0\31\0\2\u01c0\1\120"+
    "\114\0\1\u01c1\13\0\13\11\1\0\1\11\4\0\1\u01c2"+
    "\5\11\1\u01c3\26\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\13\11\1\u01c4\21\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\u01c5\16\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\u01c6\22\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\20\11\1\u01c7\14\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\u01c8\22\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\13\11\1\u01c9\21\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u01ca\17\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u01cb\24\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\u01cc\25\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\u01cd\16\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u01ce\17\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\25\11\1\u01cf\7\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\23\11\1\u01d0\11\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u01d1\17\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u01d2\24\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u01d3\22\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\u01d4\22\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\u01d5\33\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\33\11\1\u01d6\1\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u01d7\32\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u01d8\30\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\u01d9\16\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u01da\17\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\u01db\33\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u01dc\34\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u01dd\24\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\u01de\24\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\u01df"+
    "\34\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u01e0\22\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u01e1"+
    "\6\11\1\u01e2\1\u01e3\22\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\u01e4\30\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\20\11\1\u01e5\14\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u01e6\34\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u01e7\17\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\u01e8\22\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\27\11\1\u01e9\5\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u01ea\23\11\25\0"+
    "\3\11\2\0\1\11\6\0\7\11\1\u01eb\3\11\1\0"+
    "\1\11\4\0\35\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\13\11\1\u01ec\21\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\u01ed\16\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u01ee\17\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\u01ef\16\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u01f0\30\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u01f1\24\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\u01f2\22\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u01f3\17\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\17\11\1\u01f4\15\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\23\11\1\u01f5\11\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u01f6\30\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\u01f7\34\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\u01f8\32\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\u01f9\23\11\25\0\3\11\2\0\1\11\50\0\1\u01fa"+
    "\120\0\1\u01fb\116\0\1\u01b8\107\0\1\u01fc\105\0\1\u01b8"+
    "\74\0\2\u01fd\1\u011b\1\0\5\u01fd\1\0\1\u01fd\4\0"+
    "\1\u01fd\1\u011b\5\0\2\u01fd\1\0\1\u01fd\3\0\1\u01fd"+
    "\3\0\1\u01fd\3\0\3\u01fd\31\0\3\u01fd\13\0\1\u01fe"+
    "\1\107\1\263\2\0\3\u01fe\1\115\1\116\1\117\5\0"+
    "\1\263\5\0\1\115\1\120\1\0\1\117\13\0\1\107"+
    "\2\u01fe\31\0\2\u01fe\1\120\13\0\1\u01ff\1\107\1\263"+
    "\2\0\3\u01ff\1\115\1\116\1\117\5\0\1\263\5\0"+
    "\1\115\1\120\1\0\1\117\13\0\1\107\2\u01ff\31\0"+
    "\2\u01ff\1\120\60\0\1\u0200\47\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u0201\27\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\u0202\25\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\u0203\23\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u0204\34\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\20\11\1\u0205\14\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\23\11\1\u0206\11\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u0207\23\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u0208\26\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\u0209\26\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u020a\17\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\20\11\1\u020b\14\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\u020c\16\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u020d\32\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\u020e\22\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u020f\17\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u0210\23\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\14\11\1\u0211\20\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\u0212\25\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\u0213\30\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\u0214\16\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\17\11\1\u0215\11\11\1\u0216\3\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\21\11\1\u0217"+
    "\13\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0218\17\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u0219"+
    "\32\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\21\11\1\u021a\13\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\u021b"+
    "\33\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\u021c\23\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\u021d"+
    "\17\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\u021e\23\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u021f"+
    "\22\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0220\17\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u0221"+
    "\22\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\23\11\1\u0222\11\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u0223"+
    "\22\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\20\11\1\u0224\14\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u0225"+
    "\22\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\u0226\33\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\u0227"+
    "\33\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0228\17\11\25\0\3\11\2\0"+
    "\1\11\37\0\1\u0169\123\0\1\u01b8\101\0\1\u01b8\77\0"+
    "\2\u0229\1\u011b\1\0\5\u0229\1\0\1\u0229\4\0\1\u0229"+
    "\1\u011b\5\0\2\u0229\1\0\1\u0229\3\0\1\u0229\3\0"+
    "\1\u0229\3\0\3\u0229\31\0\3\u0229\13\0\1\u022a\1\107"+
    "\1\263\2\0\3\u022a\1\115\1\116\1\117\5\0\1\263"+
    "\5\0\1\115\1\120\1\0\1\117\13\0\1\107\2\u022a"+
    "\31\0\2\u022a\1\120\13\0\1\u022b\1\107\1\263\2\0"+
    "\3\u022b\1\115\1\116\1\117\5\0\1\263\5\0\1\115"+
    "\1\120\1\0\1\117\13\0\1\107\2\u022b\31\0\2\u022b"+
    "\1\120\62\0\1\u022c\45\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\u022d\11\11\1\u022e\16\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u022f"+
    "\16\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0230\17\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\u0231\15\11"+
    "\1\u0232\16\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\u0233\30\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\23\11"+
    "\1\u0234\11\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\u0235\22\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\u0236\23\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\u0237\17\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u0238\22\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\u0239\33\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u023a\22\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\u023b\32\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\u023c"+
    "\34\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\20\11\1\u023d\14\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\u023e\34\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u023f\22\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0240\17\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\23\11\1\u0241\11\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u0242\24\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u0243\17\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0244\17\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u0245\22\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u0246\24\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\20\11\1\u0247\14\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\23\11\1\u0248\11\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\23\11\1\u0249\11\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u024a\27\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u024b\22\11\25\0\3\11\2\0\1\11"+
    "\10\0\2\u024c\1\u011b\1\0\5\u024c\1\0\1\u024c\4\0"+
    "\1\u024c\1\u011b\5\0\2\u024c\1\0\1\u024c\3\0\1\u024c"+
    "\3\0\1\u024c\3\0\3\u024c\31\0\3\u024c\13\0\1\u024d"+
    "\1\107\1\263\2\0\3\u024d\1\115\1\116\1\117\5\0"+
    "\1\263\5\0\1\115\1\120\1\0\1\117\13\0\1\107"+
    "\2\u024d\31\0\2\u024d\1\120\13\0\1\u024e\1\107\1\263"+
    "\2\0\3\u024e\1\115\1\116\1\117\5\0\1\263\5\0"+
    "\1\115\1\120\1\0\1\117\13\0\1\107\2\u024e\31\0"+
    "\2\u024e\1\120\61\0\1\u024f\46\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\u0250\26\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u0251\5\11\1\u0252"+
    "\26\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u0253\22\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\u0254"+
    "\27\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\u0255\34\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\u0256\32\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\16\11\1\u0257\16\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\u0258\26\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u0259\17\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u025a\27\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\23\11\1\u025b\11\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\u025c\33\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\u025d\30\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u025e\24\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\23\11\1\u025f\11\11\25\0\3\11\2\0\1\11"+
    "\10\0\2\u0260\1\u011b\1\0\5\u0260\1\0\1\u0260\4\0"+
    "\1\u0260\1\u011b\5\0\2\u0260\1\0\1\u0260\3\0\1\u0260"+
    "\3\0\1\u0260\3\0\3\u0260\31\0\3\u0260\13\0\1\u0261"+
    "\1\107\1\263\2\0\3\u0261\1\115\1\116\1\117\5\0"+
    "\1\263\5\0\1\115\1\120\1\0\1\117\13\0\1\107"+
    "\2\u0261\31\0\2\u0261\1\120\13\0\1\u0262\1\107\1\263"+
    "\2\0\3\u0262\1\115\1\116\1\117\5\0\1\263\5\0"+
    "\1\115\1\120\1\0\1\117\13\0\1\107\2\u0262\31\0"+
    "\2\u0262\1\120\114\0\1\u0263\13\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u0264\22\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\u0265\30\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\14\11\1\u0266\20\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u0267\27\11"+
    "\25\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u0268\27\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\34\11\1\u0269\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\u026a\34\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\16\11\1\u026b\16\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\u026c\17\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\u026d\22\11\25\0\3\11"+
    "\2\0\1\11\10\0\2\u026e\1\u011b\1\0\5\u026e\1\0"+
    "\1\u026e\4\0\1\u026e\1\u011b\5\0\2\u026e\1\0\1\u026e"+
    "\3\0\1\u026e\3\0\1\u026e\3\0\3\u026e\31\0\3\u026e"+
    "\13\0\1\u026f\1\107\1\263\2\0\3\u026f\1\115\1\116"+
    "\1\117\5\0\1\263\5\0\1\115\1\120\1\0\1\117"+
    "\13\0\1\107\2\u026f\31\0\2\u026f\1\120\13\0\1\u0270"+
    "\1\107\1\263\2\0\3\u0270\1\115\1\116\1\117\5\0"+
    "\1\263\5\0\1\115\1\120\1\0\1\117\13\0\1\107"+
    "\2\u0270\31\0\2\u0270\1\120\60\0\1\u0271\47\0\13\11"+
    "\1\0\1\11\4\0\17\11\1\u0272\15\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\16\11"+
    "\1\u0273\16\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\14\11\1\u0274\20\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u0275\22\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\u0276\17\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u0277\22\11\25\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\5\11\1\u0278\27\11\25\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\u0279"+
    "\34\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u027a\17\11\25\0\3\11\2\0"+
    "\1\11\10\0\2\u027b\1\u011b\1\0\5\u027b\1\0\1\u027b"+
    "\4\0\1\u027b\1\u011b\5\0\2\u027b\1\0\1\u027b\3\0"+
    "\1\u027b\3\0\1\u027b\3\0\3\u027b\31\0\3\u027b\13\0"+
    "\1\u027c\1\107\1\263\2\0\3\u027c\1\115\1\116\1\117"+
    "\5\0\1\263\5\0\1\115\1\120\1\0\1\117\13\0"+
    "\1\107\2\u027c\31\0\2\u027c\1\120\13\0\1\u027d\1\107"+
    "\1\263\2\0\3\u027d\1\115\1\116\1\117\5\0\1\263"+
    "\5\0\1\115\1\120\1\0\1\117\13\0\1\107\2\u027d"+
    "\31\0\2\u027d\1\120\11\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\u027e\16\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\u027f\22\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u0280\32\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\23\11\1\u0281\11\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u0282\24\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u0283\17\11\25\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\u0284\33\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u0285\23\11\25\0"+
    "\3\11\2\0\1\11\10\0\2\u0286\1\u011b\1\0\5\u0286"+
    "\1\0\1\u0286\4\0\1\u0286\1\u011b\5\0\2\u0286\1\0"+
    "\1\u0286\3\0\1\u0286\3\0\1\u0286\3\0\3\u0286\31\0"+
    "\3\u0286\13\0\1\u0287\1\107\1\263\2\0\3\u0287\1\115"+
    "\1\116\1\117\5\0\1\263\5\0\1\115\1\120\1\0"+
    "\1\117\13\0\1\107\2\u0287\31\0\2\u0287\1\120\13\0"+
    "\1\u0288\1\107\1\263\2\0\3\u0288\1\115\1\116\1\117"+
    "\5\0\1\263\5\0\1\115\1\120\1\0\1\117\13\0"+
    "\1\107\2\u0288\31\0\2\u0288\1\120\11\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u0289\22\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\u028a"+
    "\33\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u028b\17\11\25\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\u028c"+
    "\17\11\25\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\16\11\1\u028d\16\11\25\0\3\11\2\0"+
    "\1\11\10\0\2\u028e\1\u011b\1\0\5\u028e\1\0\1\u028e"+
    "\4\0\1\u028e\1\u011b\5\0\2\u028e\1\0\1\u028e\3\0"+
    "\1\u028e\3\0\1\u028e\3\0\3\u028e\31\0\3\u028e\13\0"+
    "\1\u028f\1\107\1\263\2\0\3\u028f\1\115\1\116\1\117"+
    "\5\0\1\263\5\0\1\115\1\120\1\0\1\117\13\0"+
    "\1\107\2\u028f\31\0\2\u028f\1\120\13\0\1\u0290\1\107"+
    "\1\263\2\0\3\u0290\1\115\1\116\1\117\5\0\1\263"+
    "\5\0\1\115\1\120\1\0\1\117\13\0\1\107\2\u0290"+
    "\31\0\2\u0290\1\120\11\0\13\11\1\0\1\11\4\0"+
    "\20\11\1\u0291\14\11\25\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u0292\34\11\25\0\3\11"+
    "\2\0\1\11\10\0\2\u0293\1\u011b\1\0\5\u0293\1\0"+
    "\1\u0293\4\0\1\u0293\1\u011b\5\0\2\u0293\1\0\1\u0293"+
    "\3\0\1\u0293\3\0\1\u0293\3\0\3\u0293\31\0\3\u0293"+
    "\13\0\1\u0294\1\107\1\263\2\0\3\u0294\1\115\1\116"+
    "\1\117\5\0\1\263\5\0\1\115\1\120\1\0\1\117"+
    "\13\0\1\107\2\u0294\31\0\2\u0294\1\120\13\0\1\u0295"+
    "\1\107\1\263\2\0\3\u0295\1\115\1\116\1\117\5\0"+
    "\1\263\5\0\1\115\1\120\1\0\1\117\13\0\1\107"+
    "\2\u0295\31\0\2\u0295\1\120\11\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u0296\17\11\25\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u0297\27\11"+
    "\25\0\3\11\2\0\1\11\10\0\2\u0298\1\u011b\1\0"+
    "\5\u0298\1\0\1\u0298\4\0\1\u0298\1\u011b\5\0\2\u0298"+
    "\1\0\1\u0298\3\0\1\u0298\3\0\1\u0298\3\0\3\u0298"+
    "\31\0\3\u0298\13\0\1\u0299\1\107\1\263\2\0\3\u0299"+
    "\1\115\1\116\1\117\5\0\1\263\5\0\1\115\1\120"+
    "\1\0\1\117\13\0\1\107\2\u0299\31\0\2\u0299\1\120"+
    "\13\0\1\u029a\1\107\1\263\2\0\3\u029a\1\115\1\116"+
    "\1\117\5\0\1\263\5\0\1\115\1\120\1\0\1\117"+
    "\13\0\1\107\2\u029a\31\0\2\u029a\1\120\11\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\u029b\17\11\25\0\3\11"+
    "\2\0\1\11\10\0\2\u029c\1\u011b\1\0\5\u029c\1\0"+
    "\1\u029c\4\0\1\u029c\1\u011b\5\0\2\u029c\1\0\1\u029c"+
    "\3\0\1\u029c\3\0\1\u029c\3\0\3\u029c\31\0\3\u029c"+
    "\13\0\1\u029d\1\107\1\263\2\0\3\u029d\1\115\1\116"+
    "\1\117\5\0\1\263\5\0\1\115\1\120\1\0\1\117"+
    "\13\0\1\107\2\u029d\31\0\2\u029d\1\120\13\0\1\u029e"+
    "\1\107\1\263\2\0\3\u029e\1\115\1\116\1\117\5\0"+
    "\1\263\5\0\1\115\1\120\1\0\1\117\13\0\1\107"+
    "\2\u029e\31\0\2\u029e\1\120\13\0\2\u029f\1\u011b\1\0"+
    "\5\u029f\1\0\1\u029f\4\0\1\u029f\1\u011b\5\0\2\u029f"+
    "\1\0\1\u029f\3\0\1\u029f\3\0\1\u029f\3\0\3\u029f"+
    "\31\0\3\u029f\13\0\1\u02a0\1\107\1\263\2\0\3\u02a0"+
    "\1\115\1\116\1\117\5\0\1\263\5\0\1\115\1\120"+
    "\1\0\1\117\13\0\1\107\2\u02a0\31\0\2\u02a0\1\120"+
    "\15\0\1\u011b\15\0\1\u011b\76\0\1\u02a1\1\107\1\263"+
    "\2\0\3\u02a1\1\115\1\116\1\117\5\0\1\263\5\0"+
    "\1\115\1\120\1\0\1\117\13\0\1\107\2\u02a1\31\0"+
    "\2\u02a1\1\120\13\0\1\u02a2\1\107\1\263\2\0\3\u02a2"+
    "\1\115\1\116\1\117\5\0\1\263\5\0\1\115\1\120"+
    "\1\0\1\117\13\0\1\107\2\u02a2\31\0\2\u02a2\1\120"+
    "\13\0\1\u02a3\1\107\1\263\2\0\3\u02a3\1\115\1\116"+
    "\1\117\5\0\1\263\5\0\1\115\1\120\1\0\1\117"+
    "\13\0\1\107\2\u02a3\31\0\2\u02a3\1\120\13\0\1\u02a4"+
    "\1\107\1\263\2\0\3\u02a4\1\115\1\116\1\117\5\0"+
    "\1\263\5\0\1\115\1\120\1\0\1\117\13\0\1\107"+
    "\2\u02a4\31\0\2\u02a4\1\120\13\0\2\107\1\263\2\0"+
    "\3\107\1\115\1\116\1\117\5\0\1\263\5\0\1\115"+
    "\1\120\1\0\1\117\13\0\3\107\31\0\2\107\1\120"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[41238];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\24\1\10\11"+
    "\4\1\3\11\10\1\2\11\3\1\1\11\2\1\1\0"+
    "\2\11\2\1\1\11\1\0\3\1\1\11\1\1\1\0"+
    "\1\11\1\0\2\11\64\1\2\11\1\1\1\11\1\1"+
    "\11\11\6\0\1\11\2\1\11\11\12\1\1\0\1\11"+
    "\5\1\2\0\106\1\1\11\1\1\1\11\2\0\1\1"+
    "\10\0\1\11\1\0\1\11\1\0\11\11\3\1\1\0"+
    "\110\1\1\11\11\0\3\1\1\0\102\1\1\11\5\0"+
    "\3\1\1\0\70\1\3\0\3\1\1\0\53\1\1\0"+
    "\42\1\1\0\23\1\1\0\12\1\1\0\2\1\1\11"+
    "\11\1\1\0\12\1\1\0\7\1\1\0\4\1\1\0"+
    "\4\1\1\0\3\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Token symbol(TokenKinds type) {
    return new Token(type, yyline+1, yycolumn+1);
  }

  private Token symbol(TokenKinds type, Object value) {
    return new Token(type, value.toString(), yyline+1, yycolumn+1);
  }

  /** 
   * assumes correct representation of a long value for 
   * specified radix in scanner buffer from <code>start</code> 
   * to <code>end</code> 
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3484) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(TokenKinds.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 174: break;
          case 2: 
            { /* ignore */
            }
          case 175: break;
          case 3: 
            { return symbol(TokenKinds.DIV);
            }
          case 176: break;
          case 4: 
            { return symbol(TokenKinds.MULT);
            }
          case 177: break;
          case 5: 
            { return symbol(TokenKinds.IDENTIFIER, yytext());
            }
          case 178: break;
          case 6: 
            { return symbol(TokenKinds.INTEGER_LITERAL, Integer.valueOf(yytext()));
            }
          case 179: break;
          case 7: 
            { return symbol(TokenKinds.DOT);
            }
          case 180: break;
          case 8: 
            { return symbol(TokenKinds.MINUS);
            }
          case 181: break;
          case 9: 
            { yybegin(STRING); string.setLength(0);
            }
          case 182: break;
          case 10: 
            { yybegin(CHARLITERAL);
            }
          case 183: break;
          case 11: 
            { return symbol(TokenKinds.LPAREN);
            }
          case 184: break;
          case 12: 
            { return symbol(TokenKinds.RPAREN);
            }
          case 185: break;
          case 13: 
            { return symbol(TokenKinds.LBRACE);
            }
          case 186: break;
          case 14: 
            { return symbol(TokenKinds.RBRACE);
            }
          case 187: break;
          case 15: 
            { return symbol(TokenKinds.LBRACK);
            }
          case 188: break;
          case 16: 
            { return symbol(TokenKinds.RBRACK);
            }
          case 189: break;
          case 17: 
            { return symbol(TokenKinds.SEMICOLON);
            }
          case 190: break;
          case 18: 
            { return symbol(TokenKinds.COMMA);
            }
          case 191: break;
          case 19: 
            { return symbol(TokenKinds.EQ);
            }
          case 192: break;
          case 20: 
            { return symbol(TokenKinds.GT);
            }
          case 193: break;
          case 21: 
            { return symbol(TokenKinds.LT);
            }
          case 194: break;
          case 22: 
            { return symbol(TokenKinds.NOT);
            }
          case 195: break;
          case 23: 
            { return symbol(TokenKinds.COMPL);
            }
          case 196: break;
          case 24: 
            { return symbol(TokenKinds.QUESTION);
            }
          case 197: break;
          case 25: 
            { return symbol(TokenKinds.COLON);
            }
          case 198: break;
          case 26: 
            { return symbol(TokenKinds.BITAND);
            }
          case 199: break;
          case 27: 
            { return symbol(TokenKinds.BITOR);
            }
          case 200: break;
          case 28: 
            { return symbol(TokenKinds.PLUS);
            }
          case 201: break;
          case 29: 
            { return symbol(TokenKinds.XOR);
            }
          case 202: break;
          case 30: 
            { return symbol(TokenKinds.MOD);
            }
          case 203: break;
          case 31: 
            { string.append( yytext() );
            }
          case 204: break;
          case 32: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 205: break;
          case 33: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.STRING_LITERAL, string.toString());
            }
          case 206: break;
          case 34: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 207: break;
          case 35: 
            { return symbol(TokenKinds.DIVEQ);
            }
          case 208: break;
          case 36: 
            { return symbol(TokenKinds.MULTEQ);
            }
          case 209: break;
          case 37: 
            { return symbol(TokenKinds.INTEGER_LITERAL, Integer.valueOf((int) parseLong(0, yylength(), 8)));
            }
          case 210: break;
          case 38: 
            { return symbol(TokenKinds.FLOATING_POINT_LITERAL, new Double(yytext()));
            }
          case 211: break;
          case 39: 
            { return symbol(TokenKinds.INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
          case 212: break;
          case 40: 
            { return symbol(TokenKinds.FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          case 213: break;
          case 41: 
            { return symbol(TokenKinds.FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
          case 214: break;
          case 42: 
            { return symbol(TokenKinds.MINUSMINUS);
            }
          case 215: break;
          case 43: 
            { return symbol(TokenKinds.MINUSEQ);
            }
          case 216: break;
          case 44: 
            { return symbol(TokenKinds.IF);
            }
          case 217: break;
          case 45: 
            { return symbol(TokenKinds.OR);
            }
          case 218: break;
          case 46: 
            { return symbol(TokenKinds.DO);
            }
          case 219: break;
          case 47: 
            { return symbol(TokenKinds.EQEQ);
            }
          case 220: break;
          case 48: 
            { return symbol(TokenKinds.GTEQ);
            }
          case 221: break;
          case 49: 
            { return symbol(TokenKinds.RSHIFT);
            }
          case 222: break;
          case 50: 
            { return symbol(TokenKinds.LTEQ);
            }
          case 223: break;
          case 51: 
            { return symbol(TokenKinds.LSHIFT);
            }
          case 224: break;
          case 52: 
            { return symbol(TokenKinds.NOT_EQ);
            }
          case 225: break;
          case 53: 
            { return symbol(TokenKinds.AND_EQ);
            }
          case 226: break;
          case 54: 
            { return symbol(TokenKinds.AND);
            }
          case 227: break;
          case 55: 
            { return symbol(TokenKinds.OR_EQ);
            }
          case 228: break;
          case 56: 
            { return symbol(TokenKinds.PLUSEQ);
            }
          case 229: break;
          case 57: 
            { return symbol(TokenKinds.PLUSPLUS);
            }
          case 230: break;
          case 58: 
            { return symbol(TokenKinds.XOR_EQ);
            }
          case 231: break;
          case 59: 
            { return symbol(TokenKinds.MODEQ);
            }
          case 232: break;
          case 60: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 233: break;
          case 61: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 234: break;
          case 62: 
            { string.append( '\"' );
            }
          case 235: break;
          case 63: 
            { string.append( '\'' );
            }
          case 236: break;
          case 64: 
            { string.append( '\\' );
            }
          case 237: break;
          case 65: 
            { string.append( '\n' );
            }
          case 238: break;
          case 66: 
            { string.append( '\f' );
            }
          case 239: break;
          case 67: 
            { string.append( '\t' );
            }
          case 240: break;
          case 68: 
            { string.append( '\b' );
            }
          case 241: break;
          case 69: 
            { string.append( '\r' );
            }
          case 242: break;
          case 70: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 243: break;
          case 71: 
            { return symbol(TokenKinds.INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
            }
          case 244: break;
          case 72: 
            { return symbol(TokenKinds.INTEGER_LITERAL, Integer.valueOf((int) parseLong(2, yylength(), 16)));
            }
          case 245: break;
          case 73: 
            { return symbol(TokenKinds.ASM);
            }
          case 246: break;
          case 74: 
            { return symbol(TokenKinds.INT);
            }
          case 247: break;
          case 75: 
            { return symbol(TokenKinds.NEW);
            }
          case 248: break;
          case 76: 
            { return symbol(TokenKinds.FOR);
            }
          case 249: break;
          case 77: 
            { return symbol(TokenKinds.TRY);
            }
          case 250: break;
          case 78: 
            { return symbol(TokenKinds.RSHIFTEQ);
            }
          case 251: break;
          case 79: 
            { return symbol(TokenKinds.URSHIFT);
            }
          case 252: break;
          case 80: 
            { return symbol(TokenKinds.LSHIFTEQ);
            }
          case 253: break;
          case 81: 
            { return symbol(TokenKinds.PREPROCESSOR, yytext());
            }
          case 254: break;
          case 82: 
            { yybegin(YYINITIAL); 
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(TokenKinds.CHARACTER_LITERAL, (char)val);
            }
          case 255: break;
          case 83: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\"');
            }
          case 256: break;
          case 84: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\'');
            }
          case 257: break;
          case 85: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\\');
            }
          case 258: break;
          case 86: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\n');
            }
          case 259: break;
          case 87: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\f');
            }
          case 260: break;
          case 88: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\t');
            }
          case 261: break;
          case 89: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\b');
            }
          case 262: break;
          case 90: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\r');
            }
          case 263: break;
          case 91: 
            { return symbol(TokenKinds.INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
            }
          case 264: break;
          case 92: 
            { return symbol(TokenKinds.AUTO);
            }
          case 265: break;
          case 93: 
            { return symbol(TokenKinds.LONG);
            }
          case 266: break;
          case 94: 
            { return symbol(TokenKinds.GOTO);
            }
          case 267: break;
          case 95: 
            { return symbol(TokenKinds.NULL_LITERAL);
            }
          case 268: break;
          case 96: 
            { return symbol(TokenKinds.ELSE);
            }
          case 269: break;
          case 97: 
            { return symbol(TokenKinds.ENUM);
            }
          case 270: break;
          case 98: 
            { return symbol(TokenKinds.BOOLEAN_LITERAL, true);
            }
          case 271: break;
          case 99: 
            { return symbol(TokenKinds.THIS);
            }
          case 272: break;
          case 100: 
            { return symbol(TokenKinds.CASE);
            }
          case 273: break;
          case 101: 
            { return symbol(TokenKinds.CHAR);
            }
          case 274: break;
          case 102: 
            { return symbol(TokenKinds.BOOL);
            }
          case 275: break;
          case 103: 
            { return symbol(TokenKinds.VOID);
            }
          case 276: break;
          case 104: 
            { return symbol(TokenKinds.URSHIFTEQ);
            }
          case 277: break;
          case 105: 
            { return symbol(TokenKinds.SHORT);
            }
          case 278: break;
          case 106: 
            { return symbol(TokenKinds.BOOLEAN_LITERAL, false);
            }
          case 279: break;
          case 107: 
            { return symbol(TokenKinds.FLOAT);
            }
          case 280: break;
          case 108: 
            { return symbol(TokenKinds.THROW);
            }
          case 281: break;
          case 109: 
            { return symbol(TokenKinds.CATCH);
            }
          case 282: break;
          case 110: 
            { return symbol(TokenKinds.CLASS);
            }
          case 283: break;
          case 111: 
            { return symbol(TokenKinds.CONST);
            }
          case 284: break;
          case 112: 
            { return symbol(TokenKinds.UNION);
            }
          case 285: break;
          case 113: 
            { return symbol(TokenKinds.USING);
            }
          case 286: break;
          case 114: 
            { return symbol(TokenKinds.BREAK);
            }
          case 287: break;
          case 115: 
            { return symbol(TokenKinds.WHILE);
            }
          case 288: break;
          case 116: 
            { return symbol(TokenKinds.INLINE);
            }
          case 289: break;
          case 117: 
            { return symbol(TokenKinds.SIGNED);
            }
          case 290: break;
          case 118: 
            { return symbol(TokenKinds.SIZEOF);
            }
          case 291: break;
          case 119: 
            { return symbol(TokenKinds.STATIC);
            }
          case 292: break;
          case 120: 
            { return symbol(TokenKinds.STRUCT);
            }
          case 293: break;
          case 121: 
            { return symbol(TokenKinds.SWITCH);
            }
          case 294: break;
          case 122: 
            { return symbol(TokenKinds.FRIEND);
            }
          case 295: break;
          case 123: 
            { return symbol(TokenKinds.DOUBLE);
            }
          case 296: break;
          case 124: 
            { return symbol(TokenKinds.DELETE);
            }
          case 297: break;
          case 125: 
            { return symbol(TokenKinds.EXTERN);
            }
          case 298: break;
          case 126: 
            { return symbol(TokenKinds.EXPORT);
            }
          case 299: break;
          case 127: 
            { return symbol(TokenKinds.TYPEID);
            }
          case 300: break;
          case 128: 
            { return symbol(TokenKinds.PUBLIC);
            }
          case 301: break;
          case 129: 
            { return symbol(TokenKinds.RETURN);
            }
          case 302: break;
          case 130: 
            { return symbol(TokenKinds.ALIGNAS);
            }
          case 303: break;
          case 131: 
            { return symbol(TokenKinds.ALIGNOF);
            }
          case 304: break;
          case 132: 
            { return symbol(TokenKinds.NULLPTR);
            }
          case 305: break;
          case 133: 
            { return symbol(TokenKinds.DEFAULT);
            }
          case 306: break;
          case 134: 
            { return symbol(TokenKinds.MUTABLE);
            }
          case 307: break;
          case 135: 
            { return symbol(TokenKinds.TYPEDEF);
            }
          case 308: break;
          case 136: 
            { return symbol(TokenKinds.CONCEPT);
            }
          case 309: break;
          case 137: 
            { return symbol(TokenKinds.CHAR8_T);
            }
          case 310: break;
          case 138: 
            { return symbol(TokenKinds.PRIVATE);
            }
          case 311: break;
          case 139: 
            { return symbol(TokenKinds.VIRTUAL);
            }
          case 312: break;
          case 140: 
            { return symbol(TokenKinds.WCHAR_T);
            }
          case 313: break;
          case 141: 
            { return symbol(TokenKinds.NOEXCEPT);
            }
          case 314: break;
          case 142: 
            { return symbol(TokenKinds.OPERATOR);
            }
          case 315: break;
          case 143: 
            { return symbol(TokenKinds.DECLTYPE);
            }
          case 316: break;
          case 144: 
            { return symbol(TokenKinds.EXPLICIT);
            }
          case 317: break;
          case 145: 
            { return symbol(TokenKinds.TEMPLATE);
            }
          case 318: break;
          case 146: 
            { return symbol(TokenKinds.TYPENAME);
            }
          case 319: break;
          case 147: 
            { return symbol(TokenKinds.CONTINUE);
            }
          case 320: break;
          case 148: 
            { return symbol(TokenKinds.CO_AWAIT);
            }
          case 321: break;
          case 149: 
            { return symbol(TokenKinds.CO_YIELD);
            }
          case 322: break;
          case 150: 
            { return symbol(TokenKinds.CHAR16_T);
            }
          case 323: break;
          case 151: 
            { return symbol(TokenKinds.CHAR32_T);
            }
          case 324: break;
          case 152: 
            { return symbol(TokenKinds.UNSIGNED);
            }
          case 325: break;
          case 153: 
            { return symbol(TokenKinds.REGISTER);
            }
          case 326: break;
          case 154: 
            { return symbol(TokenKinds.REFLEXPR);
            }
          case 327: break;
          case 155: 
            { return symbol(TokenKinds.REQUIRES);
            }
          case 328: break;
          case 156: 
            { return symbol(TokenKinds.VOLATILE);
            }
          case 329: break;
          case 157: 
            { return symbol(TokenKinds.NAMESPACE);
            }
          case 330: break;
          case 158: 
            { return symbol(TokenKinds.CONSTINIT);
            }
          case 331: break;
          case 159: 
            { return symbol(TokenKinds.CONSTEXPR);
            }
          case 332: break;
          case 160: 
            { return symbol(TokenKinds.CONSTEVAL);
            }
          case 333: break;
          case 161: 
            { return symbol(TokenKinds.CO_RETURN);
            }
          case 334: break;
          case 162: 
            { return symbol(TokenKinds.PROTECTED);
            }
          case 335: break;
          case 163: 
            { return symbol(TokenKinds.CONST_CAST);
            }
          case 336: break;
          case 164: 
            { return symbol(TokenKinds.INTEGER_LITERAL, Integer.valueOf(Integer.MIN_VALUE));
            }
          case 337: break;
          case 165: 
            { return symbol(TokenKinds.STATIC_CAST);
            }
          case 338: break;
          case 166: 
            { return symbol(TokenKinds.SYNCHRONIZED);
            }
          case 339: break;
          case 167: 
            { return symbol(TokenKinds.DYNAMIC_CAST);
            }
          case 340: break;
          case 168: 
            { return symbol(TokenKinds.THREAD_LOCAL);
            }
          case 341: break;
          case 169: 
            { return symbol(TokenKinds.ATOMIC_CANCEL);
            }
          case 342: break;
          case 170: 
            { return symbol(TokenKinds.ATOMIC_COMMIT);
            }
          case 343: break;
          case 171: 
            { return symbol(TokenKinds.STATIC_ASSERT);
            }
          case 344: break;
          case 172: 
            { return symbol(TokenKinds.ATOMIC_NOEXCEPT);
            }
          case 345: break;
          case 173: 
            { return symbol(TokenKinds.REINTERPRET_CAST);
            }
          case 346: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
