/* The following code was generated by JFlex 1.6.1 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2018  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals, 
   because the input is read twice and the methods used to parse
   the numbers are not very fast. 
   For a production quality application (e.g. a Java compiler) 
   this could be optimized */

package edu.odu.cs.cs350;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>cpp.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\113\1\114\1\1\16\7\4\0\1\3\1\77"+
    "\1\24\1\0\1\6\1\107\1\103\1\25\1\64\1\65\1\5\1\105"+
    "\1\73\1\23\1\21\1\4\1\10\1\16\1\15\1\57\1\110\1\17"+
    "\1\56\1\111\1\55\1\11\1\102\1\72\1\76\1\74\1\75\1\101"+
    "\1\0\3\14\1\112\1\22\1\20\5\6\1\12\13\6\1\13\2\6"+
    "\1\70\1\26\1\71\1\106\1\40\1\0\1\27\1\51\1\45\1\37"+
    "\1\41\1\36\1\32\1\54\1\31\1\6\1\53\1\30\1\43\1\33"+
    "\1\35\1\47\1\42\1\52\1\34\1\44\1\50\1\60\1\61\1\46"+
    "\1\62\1\63\1\66\1\104\1\67\1\100\6\7\1\115\32\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0"+
    "\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\1\0\5\7\2\0\246\6\1\0\46\6"+
    "\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6"+
    "\15\0\6\7\5\0\1\6\4\0\13\7\1\0\1\7\3\0\53\6"+
    "\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7"+
    "\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0"+
    "\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0"+
    "\12\7\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6"+
    "\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7\4\0\13\6"+
    "\65\0\25\6\1\0\10\6\26\0\60\7\66\6\3\7\1\6\22\7"+
    "\1\6\7\7\12\6\2\7\2\0\12\7\1\0\20\6\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0"+
    "\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6"+
    "\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6"+
    "\7\0\2\6\4\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7"+
    "\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6"+
    "\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6"+
    "\17\0\2\6\2\7\2\0\12\7\1\0\1\6\7\0\1\6\6\7"+
    "\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0"+
    "\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\6\0\4\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6\3\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\3\6\5\0"+
    "\2\6\2\7\2\0\12\7\20\0\1\6\3\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0"+
    "\2\6\2\7\2\0\12\7\1\0\2\6\15\0\4\7\1\0\10\6"+
    "\1\0\3\6\1\0\51\6\2\7\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\1\6\5\0\3\6\1\7\7\0\3\6\2\7\2\0\12\7"+
    "\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\6\0\12\7\2\0\2\7\15\0\60\6\1\7\2\6"+
    "\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6"+
    "\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6"+
    "\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6"+
    "\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6"+
    "\1\0\6\7\2\0\12\7\2\0\4\6\40\0\1\6\27\0\2\7"+
    "\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7"+
    "\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0"+
    "\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6"+
    "\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6"+
    "\14\7\1\6\17\7\2\0\46\6\1\0\1\6\5\0\1\6\2\0"+
    "\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0"+
    "\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0\126\6\2\0"+
    "\6\6\3\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0"+
    "\13\6\7\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0"+
    "\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6"+
    "\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\4\7"+
    "\1\0\12\7\6\0\130\6\10\0\5\6\2\7\42\6\1\7\1\6"+
    "\5\0\106\6\12\0\37\6\1\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\13\0\54\6\4\0\32\6\6\0\12\7\46\0"+
    "\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0"+
    "\12\7\15\0\1\6\10\0\16\7\102\0\5\7\57\6\21\7\7\6"+
    "\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\7"+
    "\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7"+
    "\44\6\2\0\11\6\107\0\3\7\1\0\25\7\4\6\1\7\4\6"+
    "\3\7\2\6\3\7\6\0\300\6\72\7\1\0\5\7\u0116\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\16\0\5\7\30\0\1\113\1\113"+
    "\5\7\20\0\2\6\23\0\1\6\13\0\5\7\1\0\12\7\1\0"+
    "\1\6\15\0\1\6\20\0\15\6\3\0\40\6\20\0\15\7\4\0"+
    "\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0"+
    "\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7"+
    "\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0"+
    "\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0"+
    "\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0"+
    "\132\6\1\0\4\6\5\0\52\6\2\0\136\6\21\0\33\6\65\0"+
    "\20\6\u0200\0\u19b6\6\112\0\u51eb\6\25\0\u048d\6\103\0\56\6\2\0"+
    "\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7"+
    "\1\0\37\6\2\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0"+
    "\44\6\1\0\10\6\77\0\13\6\1\7\3\6\1\7\4\6\1\7"+
    "\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\22\7"+
    "\12\0\12\7\6\0\22\7\6\6\3\0\1\6\1\0\1\6\2\0"+
    "\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7"+
    "\57\6\16\7\16\0\1\6\12\7\6\0\5\6\1\7\12\6\12\7"+
    "\5\6\1\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0"+
    "\12\7\6\0\27\6\3\0\1\6\3\7\62\6\1\7\1\6\3\7"+
    "\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0"+
    "\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0"+
    "\6\6\11\0\7\6\1\0\7\6\1\0\53\6\1\0\12\6\12\0"+
    "\163\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6"+
    "\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6"+
    "\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6"+
    "\2\0\66\6\50\0\15\6\3\0\20\7\20\0\20\7\3\0\2\6"+
    "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7"+
    "\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6"+
    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\6\1\0\32\6"+
    "\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6\42\0\173\6"+
    "\105\0\65\6\210\0\1\7\202\0\35\6\3\0\61\6\17\0\1\7"+
    "\37\0\40\6\15\0\36\6\5\0\46\6\5\7\5\0\36\6\2\0"+
    "\44\6\4\0\10\6\1\0\5\6\52\0\236\6\2\0\12\7\6\0"+
    "\44\6\4\0\44\6\4\0\50\6\10\0\64\6\234\0\u0137\6\11\0"+
    "\26\6\12\0\10\6\230\0\6\6\2\0\1\6\1\0\54\6\1\0"+
    "\2\6\3\0\1\6\2\0\27\6\12\0\27\6\11\0\37\6\101\0"+
    "\23\6\1\0\2\6\12\0\26\6\12\0\32\6\106\0\70\6\6\0"+
    "\2\6\100\0\1\6\3\7\1\0\2\7\5\0\4\7\4\6\1\0"+
    "\3\6\1\0\33\6\4\0\3\7\4\0\1\7\40\0\35\6\3\0"+
    "\35\6\43\0\10\6\1\0\34\6\2\7\31\0\66\6\12\0\26\6"+
    "\12\0\23\6\15\0\22\6\156\0\111\6\67\0\63\6\15\0\63\6"+
    "\u030d\0\3\7\65\6\17\7\37\0\12\7\17\0\4\7\55\6\13\7"+
    "\2\0\1\7\22\0\31\6\7\0\12\7\6\0\3\7\44\6\16\7"+
    "\1\0\12\7\20\0\43\6\1\7\2\0\1\6\11\0\3\7\60\6"+
    "\16\7\4\6\5\0\3\7\3\0\12\7\1\6\1\0\1\6\43\0"+
    "\22\6\1\0\31\6\14\7\6\0\1\7\101\0\7\6\1\0\1\6"+
    "\1\0\4\6\1\0\17\6\1\0\12\6\7\0\57\6\14\7\5\0"+
    "\12\7\6\0\4\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\2\0\1\6\6\0\1\7\5\0\5\6\2\7"+
    "\2\0\7\7\3\0\5\7\213\0\65\6\22\7\4\6\5\0\12\7"+
    "\46\0\60\6\24\7\2\6\1\0\1\6\10\0\12\7\246\0\57\6"+
    "\7\7\2\0\11\7\27\0\4\6\2\7\42\0\60\6\21\7\3\0"+
    "\1\6\13\0\12\7\46\0\53\6\15\7\10\0\12\7\66\0\32\6"+
    "\3\0\17\7\4\0\12\7\u0166\0\100\6\12\7\25\0\1\6\u0100\0"+
    "\1\6\12\7\50\6\7\7\1\6\4\7\10\0\1\7\10\0\1\6"+
    "\13\7\50\6\2\0\4\6\20\7\46\0\71\6\u0107\0\11\6\1\0"+
    "\45\6\10\7\1\0\10\7\1\6\17\0\12\7\30\0\36\6\2\0"+
    "\26\7\1\0\16\7\111\0\7\6\1\0\2\6\1\0\46\6\6\7"+
    "\3\0\1\7\1\0\2\7\1\0\7\7\1\6\1\7\10\0\12\7"+
    "\u02a6\0\u039a\6\146\0\157\6\21\0\304\6\u0abc\0\u042f\6\u0fd1\0\u0247\6"+
    "\u21b9\0\u0239\6\7\0\37\6\1\0\12\7\146\0\36\6\2\0\5\7"+
    "\13\0\60\6\7\7\11\0\4\6\14\0\12\7\11\0\25\6\5\0"+
    "\23\6\u0370\0\105\6\13\0\1\6\56\7\20\0\4\7\15\6\100\0"+
    "\2\6\36\0\u17ed\6\23\0\u02f3\6\u250d\0\u011f\6\121\0\u018c\6\u0904\0"+
    "\153\6\5\0\15\6\3\0\11\6\7\0\12\6\3\0\2\7\1\0"+
    "\4\7\u14c1\0\5\7\3\0\26\7\2\0\7\7\36\0\4\7\224\0"+
    "\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0"+
    "\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0"+
    "\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0"+
    "\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0"+
    "\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\10\6\2\0\62\7\u0200\0\67\7\4\0\62\7\10\0\1\7\16\0"+
    "\1\7\26\0\5\7\1\0\17\7\u0550\0\7\7\1\0\21\7\2\0"+
    "\7\7\1\0\2\7\1\0\5\7\u07d5\0\305\6\13\0\7\7\51\0"+
    "\104\6\7\7\5\0\12\7\u04a6\0\4\6\1\0\33\6\1\0\2\6"+
    "\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0\1\6"+
    "\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0\1\6"+
    "\1\0\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0\21\6"+
    "\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\2\0\u1682\6\16\0\u1d31\6"+
    "\u0c1f\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\24\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\2\40\1\41\2\1\2\42\1\1\1\2\1\0"+
    "\1\43\1\44\1\45\1\46\1\47\1\0\3\45\1\50"+
    "\1\46\1\0\1\51\1\0\1\52\1\53\7\5\1\54"+
    "\13\5\1\55\4\5\1\56\33\5\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\55\1\70"+
    "\1\71\1\72\1\73\1\74\2\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\12\74\1\0"+
    "\1\107\2\110\2\45\1\46\2\0\1\5\1\66\1\111"+
    "\4\5\1\112\3\5\1\26\1\113\14\5\1\114\15\5"+
    "\1\115\12\5\1\35\23\5\1\116\1\117\1\120\1\75"+
    "\1\0\1\121\1\0\1\122\1\123\1\124\1\125\1\126"+
    "\1\127\1\130\1\131\1\132\1\110\2\45\1\0\3\5"+
    "\1\133\1\134\1\5\1\135\3\5\1\136\21\5\1\137"+
    "\1\140\5\5\1\141\1\142\3\5\1\143\11\5\1\144"+
    "\11\5\1\145\10\5\1\146\2\5\1\147\1\110\2\45"+
    "\1\0\14\5\1\150\3\5\1\67\1\151\1\152\13\5"+
    "\1\153\4\5\1\154\1\155\1\156\5\5\1\27\7\5"+
    "\1\157\1\5\1\160\1\5\1\33\1\161\10\5\1\162"+
    "\1\110\2\45\1\0\2\5\1\65\1\5\1\163\2\5"+
    "\1\64\1\5\1\164\1\165\1\166\1\167\1\170\2\5"+
    "\1\171\1\172\1\173\3\5\1\174\1\5\1\175\3\5"+
    "\1\176\15\5\1\72\1\177\3\5\1\32\4\5\1\200"+
    "\3\5\1\110\2\45\1\0\1\201\1\202\3\5\1\203"+
    "\3\5\1\204\3\5\1\205\3\5\1\206\5\5\1\207"+
    "\4\5\1\210\1\5\1\211\6\5\1\212\1\5\1\213"+
    "\1\110\2\45\1\0\3\5\1\214\3\5\1\215\1\216"+
    "\1\5\1\217\1\220\1\5\1\221\4\5\1\222\1\223"+
    "\1\5\1\224\1\225\1\226\1\5\1\227\1\5\1\230"+
    "\1\231\1\232\1\233\1\110\2\45\1\0\3\5\1\234"+
    "\5\5\1\235\1\5\1\236\1\237\1\240\1\241\1\5"+
    "\1\110\2\45\1\0\10\5\1\242\1\5\1\0\2\45"+
    "\1\243\4\5\1\244\4\5\1\0\2\45\4\5\1\245"+
    "\1\246\1\247\1\5\1\0\2\45\1\5\1\250\1\251"+
    "\1\252\1\5\1\0\2\45\2\5\1\0\2\45\1\253"+
    "\1\5\1\0\2\45\1\254\1\0\1\45\1\46\1\0"+
    "\5\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[640];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\352\0\u0186\0\u01d4"+
    "\0\u0222\0\u0270\0\u02be\0\u030c\0\u035a\0\352\0\352\0\u03a8"+
    "\0\u03f6\0\u0444\0\u0492\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618"+
    "\0\u0666\0\u06b4\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888"+
    "\0\u08d6\0\u0924\0\u0972\0\352\0\352\0\352\0\352\0\352"+
    "\0\352\0\352\0\352\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\352"+
    "\0\352\0\352\0\u0af8\0\u0b46\0\u0b94\0\u0be2\0\u0c30\0\u0c7e"+
    "\0\u0ccc\0\352\0\352\0\u0d1a\0\u0d68\0\u0db6\0\352\0\u0e04"+
    "\0\u0e52\0\u0ea0\0\352\0\352\0\u0eee\0\u0f3c\0\352\0\u0f8a"+
    "\0\u0fd8\0\u1026\0\u1074\0\352\0\u10c2\0\u1110\0\352\0\u115e"+
    "\0\352\0\352\0\u11ac\0\u11fa\0\u1248\0\u1296\0\u12e4\0\u1332"+
    "\0\u1380\0\u0222\0\u13ce\0\u141c\0\u146a\0\u14b8\0\u1506\0\u1554"+
    "\0\u15a2\0\u15f0\0\u163e\0\u168c\0\u16da\0\u1728\0\u1776\0\u17c4"+
    "\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u1a34"+
    "\0\u1a82\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4"+
    "\0\u1cf2\0\u1d40\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14"+
    "\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\352\0\352"+
    "\0\u2136\0\352\0\u2184\0\352\0\352\0\352\0\352\0\352"+
    "\0\352\0\352\0\352\0\352\0\352\0\u21d2\0\u2220\0\352"+
    "\0\352\0\352\0\352\0\352\0\352\0\352\0\352\0\352"+
    "\0\u226e\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490"+
    "\0\u24de\0\u252c\0\u257a\0\352\0\u25c8\0\u2616\0\u2664\0\u26b2"+
    "\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838\0\u0222\0\u2886\0\u28d4"+
    "\0\u2922\0\u2970\0\u0222\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8\0\u0222"+
    "\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u2c7c\0\u2cca\0\u2d18"+
    "\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\u0222\0\u2e9e\0\u2eec\0\u2f3a"+
    "\0\u2f88\0\u2fd6\0\u3024\0\u3072\0\u30c0\0\u310e\0\u315c\0\u31aa"+
    "\0\u31f8\0\u3246\0\u0222\0\u3294\0\u32e2\0\u3330\0\u337e\0\u33cc"+
    "\0\u341a\0\u3468\0\u34b6\0\u3504\0\u3552\0\u35a0\0\u35ee\0\u363c"+
    "\0\u368a\0\u36d8\0\u3726\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac"+
    "\0\u38fa\0\u3948\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c"+
    "\0\u3b6a\0\352\0\u3bb8\0\352\0\352\0\u22bc\0\352\0\u3c06"+
    "\0\352\0\352\0\352\0\352\0\352\0\352\0\352\0\352"+
    "\0\352\0\u3c54\0\u3ca2\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28"+
    "\0\u0222\0\u0222\0\u3e76\0\u0222\0\u3ec4\0\u3f12\0\u3f60\0\u3fae"+
    "\0\u3ffc\0\u404a\0\u4098\0\u40e6\0\u4134\0\u4182\0\u41d0\0\u421e"+
    "\0\u426c\0\u42ba\0\u4308\0\u4356\0\u43a4\0\u43f2\0\u4440\0\u448e"+
    "\0\u44dc\0\u0222\0\u0222\0\u452a\0\u4578\0\u45c6\0\u4614\0\u4662"+
    "\0\u0222\0\u0222\0\u46b0\0\u46fe\0\u474c\0\u0222\0\u479a\0\u47e8"+
    "\0\u4836\0\u4884\0\u48d2\0\u4920\0\u496e\0\u49bc\0\u4a0a\0\u4a58"+
    "\0\u4aa6\0\u4af4\0\u4b42\0\u4b90\0\u4bde\0\u4c2c\0\u4c7a\0\u4cc8"+
    "\0\u4d16\0\u0222\0\u4d64\0\u4db2\0\u4e00\0\u4e4e\0\u4e9c\0\u4eea"+
    "\0\u4f38\0\u4f86\0\u0222\0\u4fd4\0\u5022\0\352\0\u5070\0\u50be"+
    "\0\u510c\0\u515a\0\u51a8\0\u51f6\0\u5244\0\u5292\0\u52e0\0\u532e"+
    "\0\u537c\0\u53ca\0\u5418\0\u5466\0\u54b4\0\u5502\0\u0222\0\u5550"+
    "\0\u559e\0\u55ec\0\u0222\0\u0222\0\u0222\0\u563a\0\u5688\0\u56d6"+
    "\0\u5724\0\u5772\0\u57c0\0\u580e\0\u585c\0\u58aa\0\u58f8\0\u5946"+
    "\0\u0222\0\u5994\0\u59e2\0\u5a30\0\u5a7e\0\u0222\0\u0222\0\u5acc"+
    "\0\u5b1a\0\u5b68\0\u5bb6\0\u5c04\0\u5c52\0\u0222\0\u5ca0\0\u5cee"+
    "\0\u5d3c\0\u5d8a\0\u5dd8\0\u5e26\0\u5e74\0\u0222\0\u5ec2\0\u0222"+
    "\0\u5f10\0\u0222\0\u0222\0\u5f5e\0\u5fac\0\u5ffa\0\u6048\0\u6096"+
    "\0\u60e4\0\u6132\0\u6180\0\u0222\0\u61ce\0\u621c\0\u626a\0\u62b8"+
    "\0\u6306\0\u6354\0\u0222\0\u63a2\0\u0222\0\u63f0\0\u643e\0\u0222"+
    "\0\u648c\0\u0222\0\u0222\0\u64da\0\u0222\0\u0222\0\u6528\0\u6576"+
    "\0\u0222\0\u0222\0\u0222\0\u65c4\0\u6612\0\u6660\0\u0222\0\u66ae"+
    "\0\u0222\0\u66fc\0\u674a\0\u6798\0\u0222\0\u67e6\0\u6834\0\u6882"+
    "\0\u68d0\0\u691e\0\u696c\0\u69ba\0\u6a08\0\u6a56\0\u6aa4\0\u6af2"+
    "\0\u6b40\0\u6b8e\0\u0222\0\u0222\0\u6bdc\0\u6c2a\0\u6c78\0\u0222"+
    "\0\u6cc6\0\u6d14\0\u6d62\0\u6db0\0\u0222\0\u6dfe\0\u6e4c\0\u6e9a"+
    "\0\u6ee8\0\u6f36\0\u6f84\0\u6fd2\0\u0222\0\u0222\0\u7020\0\u706e"+
    "\0\u70bc\0\u0222\0\u710a\0\u7158\0\u71a6\0\u0222\0\u71f4\0\u7242"+
    "\0\u7290\0\u0222\0\u72de\0\u732c\0\u737a\0\u0222\0\u73c8\0\u7416"+
    "\0\u7464\0\u74b2\0\u7500\0\u0222\0\u754e\0\u759c\0\u75ea\0\u7638"+
    "\0\u0222\0\u7686\0\u0222\0\u76d4\0\u7722\0\u7770\0\u77be\0\u780c"+
    "\0\u785a\0\u0222\0\u78a8\0\u0222\0\u78f6\0\u7944\0\u7992\0\u79e0"+
    "\0\u7a2e\0\u7a7c\0\u7aca\0\u0222\0\u7b18\0\u7b66\0\u7bb4\0\u0222"+
    "\0\u0222\0\u7c02\0\u0222\0\u0222\0\u7c50\0\u0222\0\u7c9e\0\u7cec"+
    "\0\u7d3a\0\u7d88\0\u0222\0\u0222\0\u7dd6\0\u0222\0\u0222\0\u0222"+
    "\0\u7e24\0\u0222\0\u7e72\0\u0222\0\u0222\0\u0222\0\u0222\0\u7ec0"+
    "\0\u7f0e\0\u7f5c\0\u7faa\0\u7ff8\0\u8046\0\u8094\0\u0222\0\u80e2"+
    "\0\u8130\0\u817e\0\u81cc\0\u821a\0\u0222\0\u8268\0\u0222\0\u0222"+
    "\0\u0222\0\u0222\0\u82b6\0\u8304\0\u8352\0\u83a0\0\u83ee\0\u843c"+
    "\0\u848a\0\u84d8\0\u8526\0\u8574\0\u85c2\0\u8610\0\u865e\0\u0222"+
    "\0\u86ac\0\u86fa\0\u8748\0\u8796\0\352\0\u87e4\0\u8832\0\u8880"+
    "\0\u88ce\0\u0222\0\u891c\0\u896a\0\u89b8\0\u8a06\0\u8a54\0\u8aa2"+
    "\0\u8af0\0\u8b3e\0\u8b8c\0\u8bda\0\u8c28\0\u0222\0\u0222\0\u0222"+
    "\0\u8c76\0\u8cc4\0\u8d12\0\u8d60\0\u8dae\0\u0222\0\u0222\0\u0222"+
    "\0\u8dfc\0\u8e4a\0\u8e98\0\u8ee6\0\u8f34\0\u8f82\0\u8fd0\0\u901e"+
    "\0\u906c\0\u0222\0\u90ba\0\u9108\0\u9156\0\u91a4\0\u0222\0\u91f2"+
    "\0\u9240\0\u9240\0\u928e\0\u92dc\0\u932a\0\u9378\0\u93c6\0\u9414";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[640];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\11\1\31\1\11\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\11\3\13"+
    "\1\42\1\43\2\11\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\2\13"+
    "\1\11\1\4\1\6\1\4\1\70\1\71\1\72\21\70"+
    "\1\73\1\70\1\74\67\70\1\75\1\76\1\77\22\75"+
    "\1\4\1\100\67\75\120\0\1\6\117\0\1\101\1\102"+
    "\66\0\1\103\115\0\1\104\27\0\13\11\1\0\1\11"+
    "\4\0\35\11\24\0\3\11\2\0\1\11\10\0\1\105"+
    "\1\106\1\107\1\110\1\0\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\5\0\1\107\5\0\1\114\1\117\1\0"+
    "\1\116\4\0\1\110\6\0\1\106\1\113\1\111\30\0"+
    "\2\113\1\117\13\0\2\13\1\107\2\0\3\13\1\114"+
    "\1\115\1\116\5\0\1\107\5\0\1\114\1\117\1\0"+
    "\1\116\13\0\3\13\30\0\2\13\1\117\13\0\2\115"+
    "\3\0\3\115\35\0\3\115\30\0\2\115\21\0\1\120"+
    "\5\0\1\121\50\0\1\122\27\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\123\2\11\1\124\1\125\7\11\1\126"+
    "\3\11\1\127\13\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\130\26\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\131\2\11\1\132\25\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\133"+
    "\26\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\134\5\11\1\135\3\11\1\136\6\11"+
    "\1\137\13\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\140\12\11\1\141\7\11"+
    "\1\142\4\11\1\143\1\144\1\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\20\11\1\145"+
    "\2\11\1\146\11\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\147\1\150\4\11\1\151"+
    "\14\11\1\152\11\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\153\3\11\1\154"+
    "\20\11\1\155\1\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\156\2\11\1\157"+
    "\12\11\1\160\15\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\21\11\1\161\13\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\162\10\11\1\163\1\11\1\164\5\11\1\165"+
    "\1\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\166\1\167\4\11\1\170\16\11\1\171"+
    "\7\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\172\26\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\21\11\1\173"+
    "\1\11\1\174\11\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\175\1\176\27\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\177\3\11\1\200\14\11\1\201\11\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\202\22\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\203\3\11"+
    "\1\204\26\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\16\11\1\205\6\11\1\206\7\11"+
    "\24\0\3\11\2\0\1\11\74\0\1\207\115\0\1\210"+
    "\1\211\114\0\1\212\1\0\1\213\113\0\1\214\115\0"+
    "\1\215\6\0\1\216\106\0\1\217\7\0\1\220\105\0"+
    "\1\221\10\0\1\222\104\0\1\223\115\0\1\224\21\0"+
    "\1\70\2\0\21\70\1\0\1\70\1\0\67\70\2\0"+
    "\1\72\113\0\1\225\2\0\5\225\1\226\4\225\2\226"+
    "\1\227\4\225\1\230\1\231\1\232\4\225\1\233\2\225"+
    "\1\234\5\225\1\235\4\225\1\236\1\237\3\225\1\227"+
    "\1\226\30\225\2\227\1\225\30\0\1\240\72\0\1\77"+
    "\113\0\1\225\2\0\5\225\1\241\4\225\2\241\1\242"+
    "\4\225\1\243\1\244\1\245\4\225\1\246\2\225\1\247"+
    "\5\225\1\250\4\225\1\251\1\252\3\225\1\242\1\241"+
    "\30\225\2\242\1\225\3\0\1\101\1\5\1\6\113\101"+
    "\5\102\1\253\110\102\10\0\1\105\1\106\1\254\2\0"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\5\0\1\254"+
    "\5\0\1\114\1\117\1\0\1\116\13\0\1\106\1\113"+
    "\1\111\30\0\2\113\1\117\13\0\2\106\3\0\3\106"+
    "\1\114\1\115\1\116\13\0\1\114\1\117\1\0\1\116"+
    "\13\0\3\106\30\0\2\106\1\117\13\0\1\255\1\256"+
    "\2\0\5\256\1\0\1\256\4\0\1\256\6\0\2\256"+
    "\1\0\1\256\3\0\1\256\3\0\1\256\3\0\3\256"+
    "\30\0\3\256\13\0\1\257\1\106\1\254\2\0\3\257"+
    "\1\114\1\115\1\116\5\0\1\254\5\0\1\114\1\117"+
    "\1\0\1\116\13\0\1\106\2\257\30\0\2\257\1\117"+
    "\13\0\1\113\1\106\1\254\2\0\3\113\1\114\1\115"+
    "\1\116\5\0\1\254\5\0\1\114\1\117\1\0\1\116"+
    "\13\0\1\106\2\113\30\0\2\113\1\117\13\0\1\260"+
    "\1\106\1\254\2\0\3\260\1\114\1\115\1\116\5\0"+
    "\1\254\5\0\1\114\1\117\1\0\1\116\13\0\1\106"+
    "\2\260\30\0\2\260\1\117\13\0\2\115\3\0\3\115"+
    "\1\114\1\0\1\116\13\0\1\114\1\117\1\0\1\116"+
    "\13\0\3\115\30\0\2\115\1\117\13\0\2\261\3\0"+
    "\3\261\3\0\1\262\31\0\3\261\25\0\1\262\2\0"+
    "\2\261\22\0\1\263\105\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\264\32\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\265\24\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\14\11\1\266\20\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\267\26\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\270\17\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\271\30\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\272\13\11\1\273\17\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\274"+
    "\17\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\14\11\1\275\20\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\276"+
    "\2\11\1\277\17\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\32\11\1\300\2\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\301\33\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\302\30\11\1\303"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\304\22\11\1\305\11\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\306"+
    "\26\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\307\32\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\310"+
    "\30\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\311\22\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\312"+
    "\23\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\313\33\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\314"+
    "\26\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\23\11\1\315\11\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\316"+
    "\32\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\21\11\1\317\13\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\320"+
    "\5\11\1\321\6\11\1\322\16\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\323"+
    "\30\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\324\27\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\21\11\1\325"+
    "\13\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\326\2\11\1\327\14\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\330\17\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\14\11\1\331\20\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\21\11\1\332\11\11\1\333\1\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\334"+
    "\20\11\1\335\11\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\20\11\1\336\14\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\337\7\11\1\340\17\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\341\34\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\342\4\11\1\343\2\11\1\344\20\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\345\34\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\23\11\1\346\11\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\22\11\1\347\12\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\350\3\11\1\351"+
    "\26\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\352\2\11\1\353\27\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\354\32\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\355\17\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\356\26\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\357\22\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\360\1\361\3\11\1\362\3\11\1\363\1\11"+
    "\1\364\17\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\23\11\1\365\11\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\366\1\367\32\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\25\11\1\370\7\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\371\32\11\24\0\3\11\2\0\1\11\74\0"+
    "\1\372\1\373\114\0\1\374\31\0\1\227\4\0\3\227"+
    "\36\0\2\227\30\0\2\227\14\0\1\375\4\0\3\375"+
    "\36\0\2\375\30\0\2\375\14\0\1\376\4\0\3\376"+
    "\5\0\1\377\30\0\2\376\30\0\2\376\14\0\1\u0100"+
    "\4\0\3\u0100\5\0\1\377\30\0\2\u0100\30\0\2\u0100"+
    "\31\0\1\u0101\115\0\1\u0102\115\0\1\u0103\115\0\1\u0104"+
    "\115\0\1\u0105\115\0\1\u0106\115\0\1\u0107\115\0\1\u0108"+
    "\70\0\4\102\1\6\1\253\110\102\10\0\1\255\1\256"+
    "\1\u0109\1\0\5\256\1\0\1\256\4\0\1\256\1\u0109"+
    "\5\0\2\256\1\0\1\256\3\0\1\256\3\0\1\256"+
    "\3\0\3\256\30\0\3\256\13\0\2\u010a\1\u0109\1\0"+
    "\5\u010a\1\0\1\u010a\4\0\1\u010a\1\u0109\5\0\2\u010a"+
    "\1\0\1\u010a\3\0\1\u010a\3\0\1\u010a\3\0\3\u010a"+
    "\30\0\3\u010a\13\0\1\u010b\1\106\1\254\2\0\3\u010b"+
    "\1\114\1\115\1\116\5\0\1\254\5\0\1\114\1\117"+
    "\1\0\1\116\13\0\1\106\2\u010b\30\0\2\u010b\1\117"+
    "\13\0\1\u010c\1\106\1\254\2\0\3\u010c\1\114\1\115"+
    "\1\116\5\0\1\254\5\0\1\114\1\117\1\0\1\116"+
    "\13\0\1\106\2\u010c\30\0\2\u010c\1\117\13\0\2\261"+
    "\3\0\3\261\1\114\15\0\1\114\1\117\15\0\3\261"+
    "\30\0\2\261\1\117\13\0\2\261\3\0\3\261\35\0"+
    "\3\261\30\0\2\261\114\0\1\u010d\13\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u010e\31\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u010f"+
    "\23\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\14\11\1\u0110\20\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\u0111"+
    "\26\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u0112\31\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u0113"+
    "\32\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\u0114\26\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u0115"+
    "\22\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\17\11\1\u0116\15\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u0117"+
    "\23\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\u0118\33\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\u0119"+
    "\30\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u011a\22\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\u011b"+
    "\17\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\21\11\1\u011c\13\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\23\11\1\u011d"+
    "\11\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u011e\17\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u011f"+
    "\16\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\23\11\1\u0120\11\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u0121"+
    "\22\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u0122\27\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\u0123\34\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u0124\22\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\22\11\1\u0125\12\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u0126\22\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u0127\34\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\u0128\33\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u0129\34\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u012a\22\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\14\11\1\u012b\20\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u012c\22\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\u012d\4\11\1\u012e\26\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u012f\34\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\20\11\1\u0130\14\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u0131\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u0132\27\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\u0133\3\11\1\u0134\22\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u0135"+
    "\22\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u0136\22\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u0137"+
    "\16\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u0138\27\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\u0139"+
    "\7\11\1\u013a\1\u013b\16\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u013c\22\11\1\u013d"+
    "\7\11\1\u013e\1\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\20\11\1\u013f\14\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\23\11\1\u0140\11\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u0141\23\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\u0142\33\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\31\11\1\u0143\3\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u0144\17\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u0145\26\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u0146\32\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u0147\30\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\u0148\5\11\1\u0149\26\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\u014a\33\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u014b\34\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u014c\30\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u014d\32\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\u014e\33\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\21\11\1\u014f\13\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\21\11\1\u0150\13\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u0151\17\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u0152\34\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0153\24\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\u0154\34\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\u0155"+
    "\33\11\24\0\3\11\2\0\1\11\74\0\1\u0156\46\0"+
    "\1\377\100\0\2\u0157\1\u0109\1\0\5\u0157\1\0\1\u0157"+
    "\4\0\1\u0157\1\u0109\5\0\2\u0157\1\0\1\u0157\3\0"+
    "\1\u0157\3\0\1\u0157\3\0\3\u0157\30\0\3\u0157\13\0"+
    "\1\u0158\1\106\1\254\2\0\3\u0158\1\114\1\115\1\116"+
    "\5\0\1\254\5\0\1\114\1\117\1\0\1\116\13\0"+
    "\1\106\2\u0158\30\0\2\u0158\1\117\13\0\1\u0159\1\106"+
    "\1\254\2\0\3\u0159\1\114\1\115\1\116\5\0\1\254"+
    "\5\0\1\114\1\117\1\0\1\116\13\0\1\106\2\u0159"+
    "\30\0\2\u0159\1\117\114\0\1\u015a\12\0\13\11\1\0"+
    "\1\11\4\0\4\11\1\u015b\30\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u015c"+
    "\22\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\u015d\32\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\u015e"+
    "\30\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u015f\27\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u0160"+
    "\16\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u0161\22\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\20\11\1\u0162"+
    "\14\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u0163\22\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\u0164"+
    "\26\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\u0165\32\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u0166"+
    "\16\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0167\17\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u0168"+
    "\16\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\25\11\1\u0169\7\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\u016a\34\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\13\11\1\u016b\21\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u016c\22\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u016d\17\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\u016e\30\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\u016f\33\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0170\17\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\21\11\1\u0171\13\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0172\17\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\14\11\1\u0173\20\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\23\11\1\u0174\11\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u0175\32\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\23\11\1\u0176\11\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\22\11\1\u0177\12\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\u0178\33\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\32\11\1\u0179\2\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u017a\34\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u017b\1\11\1\u017c\3\11\1\u017d\24\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\25\11\1\u017e\7\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u017f\27\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u0180\17\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u0181\32\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u0182\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\32\11\1\u0183\2\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u0184\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u0185\32\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\u0186\33\11\24\0\3\11\2\0\1\11\6\0"+
    "\10\11\1\u0187\2\11\1\0\1\11\4\0\26\11\1\u0188"+
    "\1\11\1\u0189\4\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\u018a\22\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u018b\32\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u018c\34\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u018d\22\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\u018e\30\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\u018f\31\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\u0190\31\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"+
    "\1\u0191\30\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\23\11\1\u0192\11\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\24\11"+
    "\1\u0193\10\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\u0194\17\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\u0195\27\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\u0196\22\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\u0197\32\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\23\11\1\u0198\11\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\21\11"+
    "\1\u0199\13\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\u019a\17\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\23\11"+
    "\1\u019b\11\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\u019c\22\11\24\0\3\11"+
    "\2\0\1\11\10\0\2\u019d\1\u0109\1\0\5\u019d\1\0"+
    "\1\u019d\4\0\1\u019d\1\u0109\5\0\2\u019d\1\0\1\u019d"+
    "\3\0\1\u019d\3\0\1\u019d\3\0\3\u019d\30\0\3\u019d"+
    "\13\0\1\u019e\1\106\1\254\2\0\3\u019e\1\114\1\115"+
    "\1\116\5\0\1\254\5\0\1\114\1\117\1\0\1\116"+
    "\13\0\1\106\2\u019e\30\0\2\u019e\1\117\13\0\1\u019f"+
    "\1\106\1\254\2\0\3\u019f\1\114\1\115\1\116\5\0"+
    "\1\254\5\0\1\114\1\117\1\0\1\116\13\0\1\106"+
    "\2\u019f\30\0\2\u019f\1\117\113\0\1\u01a0\13\0\13\11"+
    "\1\0\1\11\4\0\1\u01a1\5\11\1\u01a2\26\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\13\11\1\u01a3\21\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\u01a4\16\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u01a5\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\20\11\1\u01a6\14\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u01a7\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\13\11\1\u01a8\21\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u01a9\17\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u01aa\24\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\u01ab\25\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\u01ac\16\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u01ad\17\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\25\11\1\u01ae\7\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\23\11\1\u01af\11\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u01b0\17\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u01b1\24\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\u01b2\22\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u01b3\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\u01b4\33\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\33\11\1\u01b5\1\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u01b6\32\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\u01b7\30\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\u01b8\16\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u01b9\17\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\u01ba\33\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\u01bb\34\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\u01bc\24\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u01bd\24\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\u01be\34\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u01bf"+
    "\22\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\u01c0\6\11\1\u01c1\1\u01c2\22\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\u01c3\30\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\20\11\1\u01c4\14\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u01c5\34\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u01c6\17\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u01c7\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\27\11\1\u01c8\5\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u01c9\23\11\24\0\3\11\2\0\1\11\6\0"+
    "\7\11\1\u01ca\3\11\1\0\1\11\4\0\35\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\13\11\1\u01cb\21\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\u01cc\16\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u01cd\17\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\u01ce\16\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\u01cf\30\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u01d0\24\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u01d1\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u01d2\17\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\17\11\1\u01d3\15\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\23\11\1\u01d4\11\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\u01d5\30\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u01d6\34\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\u01d7\32\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\u01d8\23\11\24\0\3\11"+
    "\2\0\1\11\10\0\2\u01d9\1\u0109\1\0\5\u01d9\1\0"+
    "\1\u01d9\4\0\1\u01d9\1\u0109\5\0\2\u01d9\1\0\1\u01d9"+
    "\3\0\1\u01d9\3\0\1\u01d9\3\0\3\u01d9\30\0\3\u01d9"+
    "\13\0\1\u01da\1\106\1\254\2\0\3\u01da\1\114\1\115"+
    "\1\116\5\0\1\254\5\0\1\114\1\117\1\0\1\116"+
    "\13\0\1\106\2\u01da\30\0\2\u01da\1\117\13\0\1\u01db"+
    "\1\106\1\254\2\0\3\u01db\1\114\1\115\1\116\5\0"+
    "\1\254\5\0\1\114\1\117\1\0\1\116\13\0\1\106"+
    "\2\u01db\30\0\2\u01db\1\117\60\0\1\u01dc\46\0\13\11"+
    "\1\0\1\11\4\0\5\11\1\u01dd\27\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\7\11"+
    "\1\u01de\25\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\u01df\23\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\u01e0"+
    "\34\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\20\11\1\u01e1\14\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\23\11\1\u01e2"+
    "\11\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\u01e3\23\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\u01e4"+
    "\26\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\u01e5\26\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\u01e6"+
    "\17\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\20\11\1\u01e7\14\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u01e8"+
    "\16\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\u01e9\32\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u01ea"+
    "\22\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u01eb\17\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u01ec"+
    "\23\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\14\11\1\u01ed\20\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\u01ee"+
    "\25\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\4\11\1\u01ef\30\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u01f0"+
    "\16\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\17\11\1\u01f1\11\11\1\u01f2\3\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\21\11\1\u01f3\13\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u01f4\17\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u01f5\32\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\21\11\1\u01f6\13\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\u01f7\33\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u01f8\23\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u01f9\17\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u01fa\23\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u01fb\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u01fc\17\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u01fd\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\23\11\1\u01fe\11\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u01ff\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\20\11\1\u0200\14\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u0201\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\u0202\33\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\u0203\33\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u0204\17\11\24\0"+
    "\3\11\2\0\1\11\10\0\2\u0205\1\u0109\1\0\5\u0205"+
    "\1\0\1\u0205\4\0\1\u0205\1\u0109\5\0\2\u0205\1\0"+
    "\1\u0205\3\0\1\u0205\3\0\1\u0205\3\0\3\u0205\30\0"+
    "\3\u0205\13\0\1\u0206\1\106\1\254\2\0\3\u0206\1\114"+
    "\1\115\1\116\5\0\1\254\5\0\1\114\1\117\1\0"+
    "\1\116\13\0\1\106\2\u0206\30\0\2\u0206\1\117\13\0"+
    "\1\u0207\1\106\1\254\2\0\3\u0207\1\114\1\115\1\116"+
    "\5\0\1\254\5\0\1\114\1\117\1\0\1\116\13\0"+
    "\1\106\2\u0207\30\0\2\u0207\1\117\62\0\1\u0208\44\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u0209\11\11\1\u020a"+
    "\16\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\16\11\1\u020b\16\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\u020c"+
    "\17\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\u020d\15\11\1\u020e\16\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"+
    "\1\u020f\30\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\23\11\1\u0210\11\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u0211\22\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\u0212\23\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\u0213\17\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\u0214\22\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\u0215\33\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\u0216\22\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\u0217\32\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\u0218\34\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\20\11\1\u0219"+
    "\14\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\u021a\34\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u021b\22\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u021c\17\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\23\11\1\u021d\11\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u021e\24\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u021f\17\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u0220\17\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u0221\22\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u0222\24\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\20\11\1\u0223\14\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\23\11\1\u0224\11\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\23\11\1\u0225\11\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u0226\27\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u0227\22\11"+
    "\24\0\3\11\2\0\1\11\10\0\2\u0228\1\u0109\1\0"+
    "\5\u0228\1\0\1\u0228\4\0\1\u0228\1\u0109\5\0\2\u0228"+
    "\1\0\1\u0228\3\0\1\u0228\3\0\1\u0228\3\0\3\u0228"+
    "\30\0\3\u0228\13\0\1\u0229\1\106\1\254\2\0\3\u0229"+
    "\1\114\1\115\1\116\5\0\1\254\5\0\1\114\1\117"+
    "\1\0\1\116\13\0\1\106\2\u0229\30\0\2\u0229\1\117"+
    "\13\0\1\u022a\1\106\1\254\2\0\3\u022a\1\114\1\115"+
    "\1\116\5\0\1\254\5\0\1\114\1\117\1\0\1\116"+
    "\13\0\1\106\2\u022a\30\0\2\u022a\1\117\61\0\1\u022b"+
    "\45\0\13\11\1\0\1\11\4\0\6\11\1\u022c\26\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u022d\5\11\1\u022e\26\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\u022f"+
    "\22\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u0230\27\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\u0231\34\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u0232\32\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\16\11\1\u0233\16\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\u0234\26\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0235\17\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u0236\27\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\23\11\1\u0237\11\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\u0238\33\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\u0239\30\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u023a\24\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\23\11\1\u023b\11\11"+
    "\24\0\3\11\2\0\1\11\10\0\2\u023c\1\u0109\1\0"+
    "\5\u023c\1\0\1\u023c\4\0\1\u023c\1\u0109\5\0\2\u023c"+
    "\1\0\1\u023c\3\0\1\u023c\3\0\1\u023c\3\0\3\u023c"+
    "\30\0\3\u023c\13\0\1\u023d\1\106\1\254\2\0\3\u023d"+
    "\1\114\1\115\1\116\5\0\1\254\5\0\1\114\1\117"+
    "\1\0\1\116\13\0\1\106\2\u023d\30\0\2\u023d\1\117"+
    "\13\0\1\u023e\1\106\1\254\2\0\3\u023e\1\114\1\115"+
    "\1\116\5\0\1\254\5\0\1\114\1\117\1\0\1\116"+
    "\13\0\1\106\2\u023e\30\0\2\u023e\1\117\113\0\1\u023f"+
    "\13\0\13\11\1\0\1\11\4\0\12\11\1\u0240\22\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\u0241\30\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\14\11\1\u0242\20\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u0243\27\11\24\0\3\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u0244\27\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\34\11\1\u0245\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u0246\34\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\16\11"+
    "\1\u0247\16\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\u0248\17\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u0249\22\11\24\0\3\11\2\0\1\11\10\0\2\u024a"+
    "\1\u0109\1\0\5\u024a\1\0\1\u024a\4\0\1\u024a\1\u0109"+
    "\5\0\2\u024a\1\0\1\u024a\3\0\1\u024a\3\0\1\u024a"+
    "\3\0\3\u024a\30\0\3\u024a\13\0\1\u024b\1\106\1\254"+
    "\2\0\3\u024b\1\114\1\115\1\116\5\0\1\254\5\0"+
    "\1\114\1\117\1\0\1\116\13\0\1\106\2\u024b\30\0"+
    "\2\u024b\1\117\13\0\1\u024c\1\106\1\254\2\0\3\u024c"+
    "\1\114\1\115\1\116\5\0\1\254\5\0\1\114\1\117"+
    "\1\0\1\116\13\0\1\106\2\u024c\30\0\2\u024c\1\117"+
    "\60\0\1\u024d\46\0\13\11\1\0\1\11\4\0\17\11"+
    "\1\u024e\15\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\16\11\1\u024f\16\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\14\11"+
    "\1\u0250\20\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\u0251\22\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\u0252\17\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\u0253\22\11\24\0\3\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\u0254\27\11\24\0\3\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\u0255\34\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\u0256"+
    "\17\11\24\0\3\11\2\0\1\11\10\0\2\u0257\1\u0109"+
    "\1\0\5\u0257\1\0\1\u0257\4\0\1\u0257\1\u0109\5\0"+
    "\2\u0257\1\0\1\u0257\3\0\1\u0257\3\0\1\u0257\3\0"+
    "\3\u0257\30\0\3\u0257\13\0\1\u0258\1\106\1\254\2\0"+
    "\3\u0258\1\114\1\115\1\116\5\0\1\254\5\0\1\114"+
    "\1\117\1\0\1\116\13\0\1\106\2\u0258\30\0\2\u0258"+
    "\1\117\13\0\1\u0259\1\106\1\254\2\0\3\u0259\1\114"+
    "\1\115\1\116\5\0\1\254\5\0\1\114\1\117\1\0"+
    "\1\116\13\0\1\106\2\u0259\30\0\2\u0259\1\117\11\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\u025a\16\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u025b\22\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u025c\32\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\23\11\1\u025d\11\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u025e\24\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u025f\17\11\24\0\3\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\u0260\33\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u0261\23\11\24\0\3\11\2\0\1\11\10\0"+
    "\2\u0262\1\u0109\1\0\5\u0262\1\0\1\u0262\4\0\1\u0262"+
    "\1\u0109\5\0\2\u0262\1\0\1\u0262\3\0\1\u0262\3\0"+
    "\1\u0262\3\0\3\u0262\30\0\3\u0262\13\0\1\u0263\1\106"+
    "\1\254\2\0\3\u0263\1\114\1\115\1\116\5\0\1\254"+
    "\5\0\1\114\1\117\1\0\1\116\13\0\1\106\2\u0263"+
    "\30\0\2\u0263\1\117\13\0\1\u0264\1\106\1\254\2\0"+
    "\3\u0264\1\114\1\115\1\116\5\0\1\254\5\0\1\114"+
    "\1\117\1\0\1\116\13\0\1\106\2\u0264\30\0\2\u0264"+
    "\1\117\11\0\13\11\1\0\1\11\4\0\12\11\1\u0265"+
    "\22\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\u0266\33\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\u0267"+
    "\17\11\24\0\3\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0268\17\11\24\0\3\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u0269"+
    "\16\11\24\0\3\11\2\0\1\11\10\0\2\u026a\1\u0109"+
    "\1\0\5\u026a\1\0\1\u026a\4\0\1\u026a\1\u0109\5\0"+
    "\2\u026a\1\0\1\u026a\3\0\1\u026a\3\0\1\u026a\3\0"+
    "\3\u026a\30\0\3\u026a\13\0\1\u026b\1\106\1\254\2\0"+
    "\3\u026b\1\114\1\115\1\116\5\0\1\254\5\0\1\114"+
    "\1\117\1\0\1\116\13\0\1\106\2\u026b\30\0\2\u026b"+
    "\1\117\13\0\1\u026c\1\106\1\254\2\0\3\u026c\1\114"+
    "\1\115\1\116\5\0\1\254\5\0\1\114\1\117\1\0"+
    "\1\116\13\0\1\106\2\u026c\30\0\2\u026c\1\117\11\0"+
    "\13\11\1\0\1\11\4\0\20\11\1\u026d\14\11\24\0"+
    "\3\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\u026e\34\11\24\0\3\11\2\0\1\11\10\0\2\u026f"+
    "\1\u0109\1\0\5\u026f\1\0\1\u026f\4\0\1\u026f\1\u0109"+
    "\5\0\2\u026f\1\0\1\u026f\3\0\1\u026f\3\0\1\u026f"+
    "\3\0\3\u026f\30\0\3\u026f\13\0\1\u0270\1\106\1\254"+
    "\2\0\3\u0270\1\114\1\115\1\116\5\0\1\254\5\0"+
    "\1\114\1\117\1\0\1\116\13\0\1\106\2\u0270\30\0"+
    "\2\u0270\1\117\13\0\1\u0271\1\106\1\254\2\0\3\u0271"+
    "\1\114\1\115\1\116\5\0\1\254\5\0\1\114\1\117"+
    "\1\0\1\116\13\0\1\106\2\u0271\30\0\2\u0271\1\117"+
    "\11\0\13\11\1\0\1\11\4\0\15\11\1\u0272\17\11"+
    "\24\0\3\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u0273\27\11\24\0\3\11\2\0\1\11"+
    "\10\0\2\u0274\1\u0109\1\0\5\u0274\1\0\1\u0274\4\0"+
    "\1\u0274\1\u0109\5\0\2\u0274\1\0\1\u0274\3\0\1\u0274"+
    "\3\0\1\u0274\3\0\3\u0274\30\0\3\u0274\13\0\1\u0275"+
    "\1\106\1\254\2\0\3\u0275\1\114\1\115\1\116\5\0"+
    "\1\254\5\0\1\114\1\117\1\0\1\116\13\0\1\106"+
    "\2\u0275\30\0\2\u0275\1\117\13\0\1\u0276\1\106\1\254"+
    "\2\0\3\u0276\1\114\1\115\1\116\5\0\1\254\5\0"+
    "\1\114\1\117\1\0\1\116\13\0\1\106\2\u0276\30\0"+
    "\2\u0276\1\117\11\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\u0277\17\11\24\0\3\11\2\0\1\11\10\0\2\u0278"+
    "\1\u0109\1\0\5\u0278\1\0\1\u0278\4\0\1\u0278\1\u0109"+
    "\5\0\2\u0278\1\0\1\u0278\3\0\1\u0278\3\0\1\u0278"+
    "\3\0\3\u0278\30\0\3\u0278\13\0\1\u0279\1\106\1\254"+
    "\2\0\3\u0279\1\114\1\115\1\116\5\0\1\254\5\0"+
    "\1\114\1\117\1\0\1\116\13\0\1\106\2\u0279\30\0"+
    "\2\u0279\1\117\13\0\1\u027a\1\106\1\254\2\0\3\u027a"+
    "\1\114\1\115\1\116\5\0\1\254\5\0\1\114\1\117"+
    "\1\0\1\116\13\0\1\106\2\u027a\30\0\2\u027a\1\117"+
    "\13\0\2\u027b\1\u0109\1\0\5\u027b\1\0\1\u027b\4\0"+
    "\1\u027b\1\u0109\5\0\2\u027b\1\0\1\u027b\3\0\1\u027b"+
    "\3\0\1\u027b\3\0\3\u027b\30\0\3\u027b\13\0\1\u027c"+
    "\1\106\1\254\2\0\3\u027c\1\114\1\115\1\116\5\0"+
    "\1\254\5\0\1\114\1\117\1\0\1\116\13\0\1\106"+
    "\2\u027c\30\0\2\u027c\1\117\15\0\1\u0109\15\0\1\u0109"+
    "\75\0\1\u027d\1\106\1\254\2\0\3\u027d\1\114\1\115"+
    "\1\116\5\0\1\254\5\0\1\114\1\117\1\0\1\116"+
    "\13\0\1\106\2\u027d\30\0\2\u027d\1\117\13\0\1\u027e"+
    "\1\106\1\254\2\0\3\u027e\1\114\1\115\1\116\5\0"+
    "\1\254\5\0\1\114\1\117\1\0\1\116\13\0\1\106"+
    "\2\u027e\30\0\2\u027e\1\117\13\0\1\u027f\1\106\1\254"+
    "\2\0\3\u027f\1\114\1\115\1\116\5\0\1\254\5\0"+
    "\1\114\1\117\1\0\1\116\13\0\1\106\2\u027f\30\0"+
    "\2\u027f\1\117\13\0\1\u0280\1\106\1\254\2\0\3\u0280"+
    "\1\114\1\115\1\116\5\0\1\254\5\0\1\114\1\117"+
    "\1\0\1\116\13\0\1\106\2\u0280\30\0\2\u0280\1\117"+
    "\13\0\2\106\1\254\2\0\3\106\1\114\1\115\1\116"+
    "\5\0\1\254\5\0\1\114\1\117\1\0\1\116\13\0"+
    "\3\106\30\0\2\106\1\117\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37986];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\24\1\10\11"+
    "\4\1\3\11\7\1\2\11\3\1\1\11\2\1\1\0"+
    "\2\11\2\1\1\11\1\0\3\1\1\11\1\1\1\0"+
    "\1\11\1\0\2\11\64\1\2\11\1\1\1\11\1\1"+
    "\12\11\2\1\11\11\12\1\1\0\1\11\5\1\2\0"+
    "\106\1\1\11\1\1\2\11\1\0\1\11\1\0\11\11"+
    "\3\1\1\0\110\1\1\11\3\1\1\0\105\1\1\0"+
    "\73\1\1\0\53\1\1\0\42\1\1\0\23\1\1\0"+
    "\12\1\1\0\2\1\1\11\11\1\1\0\12\1\1\0"+
    "\7\1\1\0\4\1\1\0\4\1\1\0\3\1\1\0"+
    "\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[640];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Token symbol(String type) {
    return new token(type, yyline+1, yycolumn+1);
  }

  private Token symbol(String type, Object value) {
    return new Token(type, yyline+1, yycolumn+1, value.toString);
  }

  /** 
   * assumes correct representation of a long value for 
   * specified radix in scanner buffer from <code>start</code> 
   * to <code>end</code> 
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3484) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(TokenKinds.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 173: break;
          case 2: 
            { /* ignore */
            }
          case 174: break;
          case 3: 
            { return symbol(TokenKinds.DIV);
            }
          case 175: break;
          case 4: 
            { return symbol(TokenKinds.MULT);
            }
          case 176: break;
          case 5: 
            { return symbol(TokenKinds.IDENTIFIER, yytext());
            }
          case 177: break;
          case 6: 
            { return symbol(TokenKinds.INTEGER_LITERAL, Integer.valueOf(yytext()));
            }
          case 178: break;
          case 7: 
            { return symbol(TokenKinds.DOT);
            }
          case 179: break;
          case 8: 
            { return symbol(TokenKinds.MINUS);
            }
          case 180: break;
          case 9: 
            { yybegin(STRING); string.setLength(0);
            }
          case 181: break;
          case 10: 
            { yybegin(CHARLITERAL);
            }
          case 182: break;
          case 11: 
            { return symbol(TokenKinds.LPAREN);
            }
          case 183: break;
          case 12: 
            { return symbol(TokenKinds.RPAREN);
            }
          case 184: break;
          case 13: 
            { return symbol(TokenKinds.LBRACE);
            }
          case 185: break;
          case 14: 
            { return symbol(TokenKinds.RBRACE);
            }
          case 186: break;
          case 15: 
            { return symbol(TokenKinds.LBRACK);
            }
          case 187: break;
          case 16: 
            { return symbol(TokenKinds.RBRACK);
            }
          case 188: break;
          case 17: 
            { return symbol(TokenKinds.SEMICOLON);
            }
          case 189: break;
          case 18: 
            { return symbol(TokenKinds.COMMA);
            }
          case 190: break;
          case 19: 
            { return symbol(TokenKinds.EQ);
            }
          case 191: break;
          case 20: 
            { return symbol(TokenKinds.GT);
            }
          case 192: break;
          case 21: 
            { return symbol(TokenKinds.LT);
            }
          case 193: break;
          case 22: 
            { return symbol(TokenKinds.NOT);
            }
          case 194: break;
          case 23: 
            { return symbol(TokenKinds.COMPL);
            }
          case 195: break;
          case 24: 
            { return symbol(TokenKinds.QUESTION);
            }
          case 196: break;
          case 25: 
            { return symbol(TokenKinds.COLON);
            }
          case 197: break;
          case 26: 
            { return symbol(TokenKinds.BITAND);
            }
          case 198: break;
          case 27: 
            { return symbol(TokenKinds.BITOR);
            }
          case 199: break;
          case 28: 
            { return symbol(TokenKinds.PLUS);
            }
          case 200: break;
          case 29: 
            { return symbol(TokenKinds.XOR);
            }
          case 201: break;
          case 30: 
            { return symbol(TokenKinds.MOD);
            }
          case 202: break;
          case 31: 
            { string.append( yytext() );
            }
          case 203: break;
          case 32: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 204: break;
          case 33: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.STRING_LITERAL, string.toString());
            }
          case 205: break;
          case 34: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 206: break;
          case 35: 
            { return symbol(TokenKinds.DIVEQ);
            }
          case 207: break;
          case 36: 
            { return symbol(TokenKinds.MULTEQ);
            }
          case 208: break;
          case 37: 
            { return symbol(TokenKinds.INTEGER_LITERAL, Integer.valueOf((int) parseLong(0, yylength(), 8)));
            }
          case 209: break;
          case 38: 
            { return symbol(TokenKinds.FLOATING_POINT_LITERAL, new Double(yytext()));
            }
          case 210: break;
          case 39: 
            { return symbol(TokenKinds.INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
          case 211: break;
          case 40: 
            { return symbol(TokenKinds.FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          case 212: break;
          case 41: 
            { return symbol(TokenKinds.FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
          case 213: break;
          case 42: 
            { return symbol(TokenKinds.MINUSMINUS);
            }
          case 214: break;
          case 43: 
            { return symbol(TokenKinds.MINUSEQ);
            }
          case 215: break;
          case 44: 
            { return symbol(TokenKinds.IF);
            }
          case 216: break;
          case 45: 
            { return symbol(TokenKinds.OR);
            }
          case 217: break;
          case 46: 
            { return symbol(TokenKinds.DO);
            }
          case 218: break;
          case 47: 
            { return symbol(TokenKinds.EQEQ);
            }
          case 219: break;
          case 48: 
            { return symbol(TokenKinds.GTEQ);
            }
          case 220: break;
          case 49: 
            { return symbol(TokenKinds.RSHIFT);
            }
          case 221: break;
          case 50: 
            { return symbol(TokenKinds.LTEQ);
            }
          case 222: break;
          case 51: 
            { return symbol(TokenKinds.LSHIFT);
            }
          case 223: break;
          case 52: 
            { return symbol(TokenKinds.NOT_EQ);
            }
          case 224: break;
          case 53: 
            { return symbol(TokenKinds.AND_EQ);
            }
          case 225: break;
          case 54: 
            { return symbol(TokenKinds.AND);
            }
          case 226: break;
          case 55: 
            { return symbol(TokenKinds.OR_EQ);
            }
          case 227: break;
          case 56: 
            { return symbol(TokenKinds.PLUSEQ);
            }
          case 228: break;
          case 57: 
            { return symbol(TokenKinds.PLUSPLUS);
            }
          case 229: break;
          case 58: 
            { return symbol(TokenKinds.XOR_EQ);
            }
          case 230: break;
          case 59: 
            { return symbol(TokenKinds.MODEQ);
            }
          case 231: break;
          case 60: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 232: break;
          case 61: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 233: break;
          case 62: 
            { string.append( '\"' );
            }
          case 234: break;
          case 63: 
            { string.append( '\'' );
            }
          case 235: break;
          case 64: 
            { string.append( '\\' );
            }
          case 236: break;
          case 65: 
            { string.append( '\n' );
            }
          case 237: break;
          case 66: 
            { string.append( '\f' );
            }
          case 238: break;
          case 67: 
            { string.append( '\t' );
            }
          case 239: break;
          case 68: 
            { string.append( '\b' );
            }
          case 240: break;
          case 69: 
            { string.append( '\r' );
            }
          case 241: break;
          case 70: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 242: break;
          case 71: 
            { return symbol(TokenKinds.INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
            }
          case 243: break;
          case 72: 
            { return symbol(TokenKinds.INTEGER_LITERAL, Integer.valueOf((int) parseLong(2, yylength(), 16)));
            }
          case 244: break;
          case 73: 
            { return symbol(TokenKinds.ASM);
            }
          case 245: break;
          case 74: 
            { return symbol(TokenKinds.INT);
            }
          case 246: break;
          case 75: 
            { return symbol(TokenKinds.NEW);
            }
          case 247: break;
          case 76: 
            { return symbol(TokenKinds.FOR);
            }
          case 248: break;
          case 77: 
            { return symbol(TokenKinds.TRY);
            }
          case 249: break;
          case 78: 
            { return symbol(TokenKinds.RSHIFTEQ);
            }
          case 250: break;
          case 79: 
            { return symbol(TokenKinds.URSHIFT);
            }
          case 251: break;
          case 80: 
            { return symbol(TokenKindsLSHIFTEQ);
            }
          case 252: break;
          case 81: 
            { yybegin(YYINITIAL); 
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(CHARACTER_LITERAL, (char)val);
            }
          case 253: break;
          case 82: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\"');
            }
          case 254: break;
          case 83: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\'');
            }
          case 255: break;
          case 84: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\\');
            }
          case 256: break;
          case 85: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\n');
            }
          case 257: break;
          case 86: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\f');
            }
          case 258: break;
          case 87: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\t');
            }
          case 259: break;
          case 88: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\b');
            }
          case 260: break;
          case 89: 
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\r');
            }
          case 261: break;
          case 90: 
            { return symbol(TokenKinds.INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
            }
          case 262: break;
          case 91: 
            { return symbol(TokenKinds.AUTO);
            }
          case 263: break;
          case 92: 
            { return symbol(TokenKinds.LONG);
            }
          case 264: break;
          case 93: 
            { return symbol(TokenKinds.GOTO);
            }
          case 265: break;
          case 94: 
            { return symbol(TokenKinds.NULL_LITERAL);
            }
          case 266: break;
          case 95: 
            { return symbol(TokenKinds.ELSE);
            }
          case 267: break;
          case 96: 
            { return symbol(TokenKinds.ENUM);
            }
          case 268: break;
          case 97: 
            { return symbol(TokenKinds.BOOLEAN_LITERAL, true);
            }
          case 269: break;
          case 98: 
            { return symbol(TokenKinds.THIS);
            }
          case 270: break;
          case 99: 
            { return symbol(TokenKinds.CASE);
            }
          case 271: break;
          case 100: 
            { return symbol(TokenKinds.CHAR);
            }
          case 272: break;
          case 101: 
            { return symbol(TokenKinds.BOOL);
            }
          case 273: break;
          case 102: 
            { return symbol(TokenKinds.VOID);
            }
          case 274: break;
          case 103: 
            { return symbol(TokenKinds.URSHIFTEQ);
            }
          case 275: break;
          case 104: 
            { return symbol(TokenKinds.SHORT);
            }
          case 276: break;
          case 105: 
            { return symbol(TokenKinds.BOOLEAN_LITERAL, false);
            }
          case 277: break;
          case 106: 
            { return symbol(TokenKinds.FLOAT);
            }
          case 278: break;
          case 107: 
            { return symbol(TokenKinds.THROW);
            }
          case 279: break;
          case 108: 
            { return symbol(TokenKinds.CATCH);
            }
          case 280: break;
          case 109: 
            { return symbol(TokenKinds.CLASS);
            }
          case 281: break;
          case 110: 
            { return symbol(TokenKinds.CONST);
            }
          case 282: break;
          case 111: 
            { return symbol(TokenKinds.UNION);
            }
          case 283: break;
          case 112: 
            { return symbol(TokenKinds.USING);
            }
          case 284: break;
          case 113: 
            { return symbol(TokenKinds.BREAK);
            }
          case 285: break;
          case 114: 
            { return symbol(TokenKinds.WHILE);
            }
          case 286: break;
          case 115: 
            { return symbol(TokenKinds.INLINE);
            }
          case 287: break;
          case 116: 
            { return symbol(TokenKinds.SIGNED);
            }
          case 288: break;
          case 117: 
            { return symbol(TokenKinds.SIZEOF);
            }
          case 289: break;
          case 118: 
            { return symbol(TokenKinds.STATIC);
            }
          case 290: break;
          case 119: 
            { return symbol(TokenKinds.STRUCT);
            }
          case 291: break;
          case 120: 
            { return symbol(TokenKinds.SWITCH);
            }
          case 292: break;
          case 121: 
            { return symbol(TokenKinds.FRIEND));
            }
          case 293: break;
          case 122: 
            { return symbol(TokenKinds.DOUBLE);
            }
          case 294: break;
          case 123: 
            { return symbol(TokenKinds.DELETE);
            }
          case 295: break;
          case 124: 
            { return symbol(TokenKinds.EXTERN);
            }
          case 296: break;
          case 125: 
            { return symbol(TokenKinds.EXPORT);
            }
          case 297: break;
          case 126: 
            { return symbol(TokenKinds.TYPEID);
            }
          case 298: break;
          case 127: 
            { return symbol(TokenKinds.PUBLIC);
            }
          case 299: break;
          case 128: 
            { return symbol(TokenKinds.RETURN);
            }
          case 300: break;
          case 129: 
            { return symbol(TokenKinds.ALIGNAS);
            }
          case 301: break;
          case 130: 
            { return symbol(TokenKinds.ALIGNOF);
            }
          case 302: break;
          case 131: 
            { return symbol(TokenKinds.NULLPTR);
            }
          case 303: break;
          case 132: 
            { return symbol(TokenKinds.DEFAULT);
            }
          case 304: break;
          case 133: 
            { return symbol(TokenKinds.MUTABLE);
            }
          case 305: break;
          case 134: 
            { return symbol(TokenKinds.TYPEDEF);
            }
          case 306: break;
          case 135: 
            { return symbol(TokenKinds.CONCEPT);
            }
          case 307: break;
          case 136: 
            { return symbol(TokenKinds.CHAR8_T);
            }
          case 308: break;
          case 137: 
            { return symbol(TokenKinds.PRIVATE);
            }
          case 309: break;
          case 138: 
            { return symbol(TokenKinds.VIRTUAL);
            }
          case 310: break;
          case 139: 
            { return symbol(TokenKinds.WCHAR_T);
            }
          case 311: break;
          case 140: 
            { return symbol(TokenKinds.NOEXCEPT);
            }
          case 312: break;
          case 141: 
            { return symbol(TokenKinds.OPERATOR);
            }
          case 313: break;
          case 142: 
            { return symbol(TokenKinds.DECLTYPE);
            }
          case 314: break;
          case 143: 
            { return symbol(TokenKinds.EXPLICIT);
            }
          case 315: break;
          case 144: 
            { return symbol(TokenKinds.TEMPLATE);
            }
          case 316: break;
          case 145: 
            { return symbol(TokenKinds.TYPENAME);
            }
          case 317: break;
          case 146: 
            { return symbol(TokenKinds.CONTINUE);
            }
          case 318: break;
          case 147: 
            { return symbol(TokenKinds.CO_AWAIT);
            }
          case 319: break;
          case 148: 
            { return symbol(TokenKinds.CO_YIELD);
            }
          case 320: break;
          case 149: 
            { return symbol(TokenKinds.CHAR16_T);
            }
          case 321: break;
          case 150: 
            { return symbol(TokenKinds.CHAR32_T);
            }
          case 322: break;
          case 151: 
            { return symbol(TokenKinds.UNSIGNED);
            }
          case 323: break;
          case 152: 
            { return symbol(TokenKinds.REGISTER);
            }
          case 324: break;
          case 153: 
            { return symbol(TokenKinds.REFLEXPR);
            }
          case 325: break;
          case 154: 
            { return symbol(TokenKinds.REQUIRES);
            }
          case 326: break;
          case 155: 
            { return symbol(TokenKinds.VOLATILE);
            }
          case 327: break;
          case 156: 
            { return symbol(TokenKinds.NAMESPACE);
            }
          case 328: break;
          case 157: 
            { return symbol(TokenKinds.CONSTINIT);
            }
          case 329: break;
          case 158: 
            { return symbol(TokenKinds.CONSTEXPR);
            }
          case 330: break;
          case 159: 
            { return symbol(TokenKinds.CONSTEVAL);
            }
          case 331: break;
          case 160: 
            { return symbol(TokenKinds.CO_RETURN);
            }
          case 332: break;
          case 161: 
            { return symbol(TokenKinds.PROTECTED);
            }
          case 333: break;
          case 162: 
            { return symbol(TokenKinds.CONST_CAST);
            }
          case 334: break;
          case 163: 
            { return symbol(TokenKinds.INTEGER_LITERAL, Integer.valueOf(Integer.MIN_VALUE));
            }
          case 335: break;
          case 164: 
            { return symbol(TokenKinds.STATIC_CAST);
            }
          case 336: break;
          case 165: 
            { return symbol(TokenKinds.SYNCHRONIZED);
            }
          case 337: break;
          case 166: 
            { return symbol(TokenKinds.DYNAMIC_CAST);
            }
          case 338: break;
          case 167: 
            { return symbol(TokenKinds.THREAD_LOCAL);
            }
          case 339: break;
          case 168: 
            { return symbol(TokenKinds.ATOMIC_CANCEL);
            }
          case 340: break;
          case 169: 
            { return symbol(TokenKinds.ATOMIC_COMMIT);
            }
          case 341: break;
          case 170: 
            { return symbol(TokenKinds.STATIC_ASSERT);
            }
          case 342: break;
          case 171: 
            { return symbol(TokenKinds.ATOMIC_NOEXCEPT);
            }
          case 343: break;
          case 172: 
            { return symbol(TokenKinds.REINTERPRET_CAST);
            }
          case 344: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
